/* eslint-disable */
// source: lib/introspection.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf')
var goog = jspb
var global = Function('return this')()

goog.exportSymbol('proto.introspection.ClientCommand', null, global)
goog.exportSymbol('proto.introspection.ClientCommand.Command', null, global)
goog.exportSymbol('proto.introspection.ClientCommand.Source', null, global)
goog.exportSymbol('proto.introspection.CommandResponse', null, global)
goog.exportSymbol('proto.introspection.CommandResponse.Result', null, global)
goog.exportSymbol('proto.introspection.Configuration', null, global)
goog.exportSymbol('proto.introspection.Connection', null, global)
goog.exportSymbol('proto.introspection.Connection.Attributes', null, global)
goog.exportSymbol(
  'proto.introspection.Connection.RelayedOverCase',
  null,
  global
)
goog.exportSymbol('proto.introspection.Connection.Timeline', null, global)
goog.exportSymbol('proto.introspection.DHT', null, global)
goog.exportSymbol('proto.introspection.DHT.Bucket', null, global)
goog.exportSymbol('proto.introspection.DHT.Lookup', null, global)
goog.exportSymbol('proto.introspection.DHT.Params', null, global)
goog.exportSymbol('proto.introspection.DHT.PeerInDHT', null, global)
goog.exportSymbol('proto.introspection.DHT.PeerInDHT.Status', null, global)
goog.exportSymbol('proto.introspection.DHT.Query', null, global)
goog.exportSymbol('proto.introspection.DHT.QueryGauge', null, global)
goog.exportSymbol('proto.introspection.DataGauge', null, global)
goog.exportSymbol('proto.introspection.EndpointPair', null, global)
goog.exportSymbol('proto.introspection.Event', null, global)
goog.exportSymbol('proto.introspection.EventType', null, global)
goog.exportSymbol('proto.introspection.EventType.EventProperty', null, global)
goog.exportSymbol(
  'proto.introspection.EventType.EventProperty.PropertyType',
  null,
  global
)
goog.exportSymbol('proto.introspection.ResultCounter', null, global)
goog.exportSymbol('proto.introspection.Role', null, global)
goog.exportSymbol('proto.introspection.Runtime', null, global)
goog.exportSymbol('proto.introspection.ServerMessage', null, global)
goog.exportSymbol('proto.introspection.ServerMessage.PayloadCase', null, global)
goog.exportSymbol('proto.introspection.ServerNotice', null, global)
goog.exportSymbol('proto.introspection.ServerNotice.Kind', null, global)
goog.exportSymbol('proto.introspection.SlidingCounter', null, global)
goog.exportSymbol('proto.introspection.State', null, global)
goog.exportSymbol('proto.introspection.Status', null, global)
goog.exportSymbol('proto.introspection.Stream', null, global)
goog.exportSymbol('proto.introspection.Stream.ConnectionRef', null, global)
goog.exportSymbol(
  'proto.introspection.Stream.ConnectionRef.ConnectionCase',
  null,
  global
)
goog.exportSymbol('proto.introspection.Stream.Timeline', null, global)
goog.exportSymbol('proto.introspection.StreamList', null, global)
goog.exportSymbol('proto.introspection.Subsystems', null, global)
goog.exportSymbol('proto.introspection.Traffic', null, global)
goog.exportSymbol('proto.introspection.Version', null, global)
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.Version = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.introspection.Version, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.Version.displayName = 'proto.introspection.Version'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.ResultCounter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.introspection.ResultCounter, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.ResultCounter.displayName =
    'proto.introspection.ResultCounter'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.SlidingCounter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.introspection.SlidingCounter, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.SlidingCounter.displayName =
    'proto.introspection.SlidingCounter'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.DataGauge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.introspection.DataGauge, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.DataGauge.displayName = 'proto.introspection.DataGauge'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.EventType = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.introspection.EventType.repeatedFields_,
    null
  )
}
goog.inherits(proto.introspection.EventType, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.EventType.displayName = 'proto.introspection.EventType'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.EventType.EventProperty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.introspection.EventType.EventProperty, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.EventType.EventProperty.displayName =
    'proto.introspection.EventType.EventProperty'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.Runtime = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.introspection.Runtime.repeatedFields_,
    null
  )
}
goog.inherits(proto.introspection.Runtime, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.Runtime.displayName = 'proto.introspection.Runtime'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.EndpointPair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.introspection.EndpointPair, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.EndpointPair.displayName =
    'proto.introspection.EndpointPair'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.Traffic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.introspection.Traffic, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.Traffic.displayName = 'proto.introspection.Traffic'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.StreamList = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.introspection.StreamList.repeatedFields_,
    null
  )
}
goog.inherits(proto.introspection.StreamList, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.StreamList.displayName = 'proto.introspection.StreamList'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.Connection = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.introspection.Connection.repeatedFields_,
    proto.introspection.Connection.oneofGroups_
  )
}
goog.inherits(proto.introspection.Connection, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.Connection.displayName = 'proto.introspection.Connection'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.Connection.Timeline = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.introspection.Connection.Timeline, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.Connection.Timeline.displayName =
    'proto.introspection.Connection.Timeline'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.Connection.Attributes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.introspection.Connection.Attributes, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.Connection.Attributes.displayName =
    'proto.introspection.Connection.Attributes'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.Stream = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.introspection.Stream.repeatedFields_,
    null
  )
}
goog.inherits(proto.introspection.Stream, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.Stream.displayName = 'proto.introspection.Stream'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.Stream.ConnectionRef = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    null,
    proto.introspection.Stream.ConnectionRef.oneofGroups_
  )
}
goog.inherits(proto.introspection.Stream.ConnectionRef, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.Stream.ConnectionRef.displayName =
    'proto.introspection.Stream.ConnectionRef'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.Stream.Timeline = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.introspection.Stream.Timeline, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.Stream.Timeline.displayName =
    'proto.introspection.Stream.Timeline'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.DHT = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.introspection.DHT.repeatedFields_,
    null
  )
}
goog.inherits(proto.introspection.DHT, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.DHT.displayName = 'proto.introspection.DHT'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.DHT.Params = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.introspection.DHT.Params, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.DHT.Params.displayName = 'proto.introspection.DHT.Params'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.DHT.PeerInDHT = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.introspection.DHT.PeerInDHT, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.DHT.PeerInDHT.displayName =
    'proto.introspection.DHT.PeerInDHT'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.DHT.Bucket = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.introspection.DHT.Bucket.repeatedFields_,
    null
  )
}
goog.inherits(proto.introspection.DHT.Bucket, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.DHT.Bucket.displayName = 'proto.introspection.DHT.Bucket'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.DHT.Query = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.introspection.DHT.Query.repeatedFields_,
    null
  )
}
goog.inherits(proto.introspection.DHT.Query, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.DHT.Query.displayName = 'proto.introspection.DHT.Query'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.DHT.Lookup = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.introspection.DHT.Lookup.repeatedFields_,
    null
  )
}
goog.inherits(proto.introspection.DHT.Lookup, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.DHT.Lookup.displayName = 'proto.introspection.DHT.Lookup'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.DHT.QueryGauge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.introspection.DHT.QueryGauge, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.DHT.QueryGauge.displayName =
    'proto.introspection.DHT.QueryGauge'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.Subsystems = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.introspection.Subsystems.repeatedFields_,
    null
  )
}
goog.inherits(proto.introspection.Subsystems, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.Subsystems.displayName = 'proto.introspection.Subsystems'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.State = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.introspection.State, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.State.displayName = 'proto.introspection.State'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.introspection.Event, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.Event.displayName = 'proto.introspection.Event'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.ServerMessage = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    null,
    proto.introspection.ServerMessage.oneofGroups_
  )
}
goog.inherits(proto.introspection.ServerMessage, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.ServerMessage.displayName =
    'proto.introspection.ServerMessage'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.Configuration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.introspection.Configuration, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.Configuration.displayName =
    'proto.introspection.Configuration'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.ClientCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.introspection.ClientCommand, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.ClientCommand.displayName =
    'proto.introspection.ClientCommand'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.CommandResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.introspection.CommandResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.CommandResponse.displayName =
    'proto.introspection.CommandResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.introspection.ServerNotice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.introspection.ServerNotice, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.introspection.ServerNotice.displayName =
    'proto.introspection.ServerNotice'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.Version.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.introspection.Version.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.Version} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.Version.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        version: jspb.Message.getFieldWithDefault(msg, 1, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.Version}
 */
proto.introspection.Version.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.Version()
  return proto.introspection.Version.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.Version} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.Version}
 */
proto.introspection.Version.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setVersion(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.Version.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.Version.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.Version} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.Version.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined
  f = message.getVersion()
  if (f !== 0) {
    writer.writeUint32(1, f)
  }
}

/**
 * optional uint32 version = 1;
 * @return {number}
 */
proto.introspection.Version.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.Version} returns this
 */
proto.introspection.Version.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.ResultCounter.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.introspection.ResultCounter.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.ResultCounter} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.ResultCounter.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        total: jspb.Message.getFieldWithDefault(msg, 1, 0),
        ok: jspb.Message.getFieldWithDefault(msg, 2, 0),
        err: jspb.Message.getFieldWithDefault(msg, 3, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.ResultCounter}
 */
proto.introspection.ResultCounter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.ResultCounter()
  return proto.introspection.ResultCounter.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.ResultCounter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.ResultCounter}
 */
proto.introspection.ResultCounter.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setTotal(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setOk(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setErr(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.ResultCounter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.ResultCounter.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.ResultCounter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.ResultCounter.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined
  f = message.getTotal()
  if (f !== 0) {
    writer.writeUint32(1, f)
  }
  f = message.getOk()
  if (f !== 0) {
    writer.writeUint32(2, f)
  }
  f = message.getErr()
  if (f !== 0) {
    writer.writeUint32(3, f)
  }
}

/**
 * optional uint32 total = 1;
 * @return {number}
 */
proto.introspection.ResultCounter.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.ResultCounter} returns this
 */
proto.introspection.ResultCounter.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value)
}

/**
 * optional uint32 ok = 2;
 * @return {number}
 */
proto.introspection.ResultCounter.prototype.getOk = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.ResultCounter} returns this
 */
proto.introspection.ResultCounter.prototype.setOk = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value)
}

/**
 * optional uint32 err = 3;
 * @return {number}
 */
proto.introspection.ResultCounter.prototype.getErr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.ResultCounter} returns this
 */
proto.introspection.ResultCounter.prototype.setErr = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.SlidingCounter.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.introspection.SlidingCounter.toObject(
      opt_includeInstance,
      this
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.SlidingCounter} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.SlidingCounter.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        over1m: jspb.Message.getFieldWithDefault(msg, 1, 0),
        over5m: jspb.Message.getFieldWithDefault(msg, 2, 0),
        over15m: jspb.Message.getFieldWithDefault(msg, 3, 0),
        over30m: jspb.Message.getFieldWithDefault(msg, 4, 0),
        over1hr: jspb.Message.getFieldWithDefault(msg, 5, 0),
        over2hr: jspb.Message.getFieldWithDefault(msg, 6, 0),
        over4hr: jspb.Message.getFieldWithDefault(msg, 7, 0),
        over8hr: jspb.Message.getFieldWithDefault(msg, 8, 0),
        over12hr: jspb.Message.getFieldWithDefault(msg, 9, 0),
        over24hr: jspb.Message.getFieldWithDefault(msg, 10, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.SlidingCounter}
 */
proto.introspection.SlidingCounter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.SlidingCounter()
  return proto.introspection.SlidingCounter.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.SlidingCounter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.SlidingCounter}
 */
proto.introspection.SlidingCounter.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setOver1m(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setOver5m(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setOver15m(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setOver30m(value)
        break
      case 5:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setOver1hr(value)
        break
      case 6:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setOver2hr(value)
        break
      case 7:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setOver4hr(value)
        break
      case 8:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setOver8hr(value)
        break
      case 9:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setOver12hr(value)
        break
      case 10:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setOver24hr(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.SlidingCounter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.SlidingCounter.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.SlidingCounter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.SlidingCounter.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined
  f = message.getOver1m()
  if (f !== 0) {
    writer.writeUint32(1, f)
  }
  f = message.getOver5m()
  if (f !== 0) {
    writer.writeUint32(2, f)
  }
  f = message.getOver15m()
  if (f !== 0) {
    writer.writeUint32(3, f)
  }
  f = message.getOver30m()
  if (f !== 0) {
    writer.writeUint32(4, f)
  }
  f = message.getOver1hr()
  if (f !== 0) {
    writer.writeUint32(5, f)
  }
  f = message.getOver2hr()
  if (f !== 0) {
    writer.writeUint32(6, f)
  }
  f = message.getOver4hr()
  if (f !== 0) {
    writer.writeUint32(7, f)
  }
  f = message.getOver8hr()
  if (f !== 0) {
    writer.writeUint32(8, f)
  }
  f = message.getOver12hr()
  if (f !== 0) {
    writer.writeUint32(9, f)
  }
  f = message.getOver24hr()
  if (f !== 0) {
    writer.writeUint32(10, f)
  }
}

/**
 * optional uint32 over_1m = 1;
 * @return {number}
 */
proto.introspection.SlidingCounter.prototype.getOver1m = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.SlidingCounter} returns this
 */
proto.introspection.SlidingCounter.prototype.setOver1m = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value)
}

/**
 * optional uint32 over_5m = 2;
 * @return {number}
 */
proto.introspection.SlidingCounter.prototype.getOver5m = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.SlidingCounter} returns this
 */
proto.introspection.SlidingCounter.prototype.setOver5m = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value)
}

/**
 * optional uint32 over_15m = 3;
 * @return {number}
 */
proto.introspection.SlidingCounter.prototype.getOver15m = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.SlidingCounter} returns this
 */
proto.introspection.SlidingCounter.prototype.setOver15m = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value)
}

/**
 * optional uint32 over_30m = 4;
 * @return {number}
 */
proto.introspection.SlidingCounter.prototype.getOver30m = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.SlidingCounter} returns this
 */
proto.introspection.SlidingCounter.prototype.setOver30m = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value)
}

/**
 * optional uint32 over_1hr = 5;
 * @return {number}
 */
proto.introspection.SlidingCounter.prototype.getOver1hr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.SlidingCounter} returns this
 */
proto.introspection.SlidingCounter.prototype.setOver1hr = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value)
}

/**
 * optional uint32 over_2hr = 6;
 * @return {number}
 */
proto.introspection.SlidingCounter.prototype.getOver2hr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.SlidingCounter} returns this
 */
proto.introspection.SlidingCounter.prototype.setOver2hr = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value)
}

/**
 * optional uint32 over_4hr = 7;
 * @return {number}
 */
proto.introspection.SlidingCounter.prototype.getOver4hr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.SlidingCounter} returns this
 */
proto.introspection.SlidingCounter.prototype.setOver4hr = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value)
}

/**
 * optional uint32 over_8hr = 8;
 * @return {number}
 */
proto.introspection.SlidingCounter.prototype.getOver8hr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.SlidingCounter} returns this
 */
proto.introspection.SlidingCounter.prototype.setOver8hr = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value)
}

/**
 * optional uint32 over_12hr = 9;
 * @return {number}
 */
proto.introspection.SlidingCounter.prototype.getOver12hr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.SlidingCounter} returns this
 */
proto.introspection.SlidingCounter.prototype.setOver12hr = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value)
}

/**
 * optional uint32 over_24hr = 10;
 * @return {number}
 */
proto.introspection.SlidingCounter.prototype.getOver24hr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.SlidingCounter} returns this
 */
proto.introspection.SlidingCounter.prototype.setOver24hr = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.DataGauge.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.introspection.DataGauge.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.DataGauge} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.DataGauge.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        cumBytes: jspb.Message.getFieldWithDefault(msg, 1, 0),
        cumPackets: jspb.Message.getFieldWithDefault(msg, 2, 0),
        instBw: jspb.Message.getFieldWithDefault(msg, 3, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.DataGauge}
 */
proto.introspection.DataGauge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.DataGauge()
  return proto.introspection.DataGauge.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.DataGauge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.DataGauge}
 */
proto.introspection.DataGauge.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setCumBytes(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setCumPackets(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setInstBw(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.DataGauge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.DataGauge.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.DataGauge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.DataGauge.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined
  f = message.getCumBytes()
  if (f !== 0) {
    writer.writeUint64(1, f)
  }
  f = message.getCumPackets()
  if (f !== 0) {
    writer.writeUint64(2, f)
  }
  f = message.getInstBw()
  if (f !== 0) {
    writer.writeUint64(3, f)
  }
}

/**
 * optional uint64 cum_bytes = 1;
 * @return {number}
 */
proto.introspection.DataGauge.prototype.getCumBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.DataGauge} returns this
 */
proto.introspection.DataGauge.prototype.setCumBytes = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value)
}

/**
 * optional uint64 cum_packets = 2;
 * @return {number}
 */
proto.introspection.DataGauge.prototype.getCumPackets = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.DataGauge} returns this
 */
proto.introspection.DataGauge.prototype.setCumPackets = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value)
}

/**
 * optional uint64 inst_bw = 3;
 * @return {number}
 */
proto.introspection.DataGauge.prototype.getInstBw = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.DataGauge} returns this
 */
proto.introspection.DataGauge.prototype.setInstBw = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value)
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.introspection.EventType.repeatedFields_ = [2]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.EventType.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.introspection.EventType.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.EventType} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.EventType.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        name: jspb.Message.getFieldWithDefault(msg, 1, ''),
        propertyTypesList: jspb.Message.toObjectList(
          msg.getPropertyTypesList(),
          proto.introspection.EventType.EventProperty.toObject,
          includeInstance
        ),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.EventType}
 */
proto.introspection.EventType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.EventType()
  return proto.introspection.EventType.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.EventType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.EventType}
 */
proto.introspection.EventType.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setName(value)
        break
      case 2:
        var value = new proto.introspection.EventType.EventProperty()
        reader.readMessage(
          value,
          proto.introspection.EventType.EventProperty
            .deserializeBinaryFromReader
        )
        msg.addPropertyTypes(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.EventType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.EventType.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.EventType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.EventType.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined
  f = message.getName()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getPropertyTypesList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.introspection.EventType.EventProperty.serializeBinaryToWriter
    )
  }
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.EventType.EventProperty.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.introspection.EventType.EventProperty.toObject(
      opt_includeInstance,
      this
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.EventType.EventProperty} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.EventType.EventProperty.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        name: jspb.Message.getFieldWithDefault(msg, 1, ''),
        type: jspb.Message.getFieldWithDefault(msg, 2, 0),
        hasMultiple: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.EventType.EventProperty}
 */
proto.introspection.EventType.EventProperty.deserializeBinary = function(
  bytes
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.EventType.EventProperty()
  return proto.introspection.EventType.EventProperty.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.EventType.EventProperty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.EventType.EventProperty}
 */
proto.introspection.EventType.EventProperty.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setName(value)
        break
      case 2:
        var value = /** @type {!proto.introspection.EventType.EventProperty.PropertyType} */ (reader.readEnum())
        msg.setType(value)
        break
      case 3:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setHasMultiple(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.EventType.EventProperty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.EventType.EventProperty.serializeBinaryToWriter(
    this,
    writer
  )
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.EventType.EventProperty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.EventType.EventProperty.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined
  f = message.getName()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getType()
  if (f !== 0.0) {
    writer.writeEnum(2, f)
  }
  f = message.getHasMultiple()
  if (f) {
    writer.writeBool(3, f)
  }
}

/**
 * @enum {number}
 */
proto.introspection.EventType.EventProperty.PropertyType = {
  STRING: 0,
  NUMBER: 1,
  TIME: 10,
  PEERID: 11,
  MULTIADDR: 12,
  JSON: 90,
}

/**
 * optional string name = 1;
 * @return {string}
 */
proto.introspection.EventType.EventProperty.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.introspection.EventType.EventProperty} returns this
 */
proto.introspection.EventType.EventProperty.prototype.setName = function(
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional PropertyType type = 2;
 * @return {!proto.introspection.EventType.EventProperty.PropertyType}
 */
proto.introspection.EventType.EventProperty.prototype.getType = function() {
  return /** @type {!proto.introspection.EventType.EventProperty.PropertyType} */ (jspb.Message.getFieldWithDefault(
    this,
    2,
    0
  ))
}

/**
 * @param {!proto.introspection.EventType.EventProperty.PropertyType} value
 * @return {!proto.introspection.EventType.EventProperty} returns this
 */
proto.introspection.EventType.EventProperty.prototype.setType = function(
  value
) {
  return jspb.Message.setProto3EnumField(this, 2, value)
}

/**
 * optional bool has_multiple = 3;
 * @return {boolean}
 */
proto.introspection.EventType.EventProperty.prototype.getHasMultiple = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(
    this,
    3,
    false
  ))
}

/**
 * @param {boolean} value
 * @return {!proto.introspection.EventType.EventProperty} returns this
 */
proto.introspection.EventType.EventProperty.prototype.setHasMultiple = function(
  value
) {
  return jspb.Message.setProto3BooleanField(this, 3, value)
}

/**
 * optional string name = 1;
 * @return {string}
 */
proto.introspection.EventType.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.introspection.EventType} returns this
 */
proto.introspection.EventType.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * repeated EventProperty property_types = 2;
 * @return {!Array<!proto.introspection.EventType.EventProperty>}
 */
proto.introspection.EventType.prototype.getPropertyTypesList = function() {
  return /** @type{!Array<!proto.introspection.EventType.EventProperty>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.introspection.EventType.EventProperty,
    2
  ))
}

/**
 * @param {!Array<!proto.introspection.EventType.EventProperty>} value
 * @return {!proto.introspection.EventType} returns this
 */
proto.introspection.EventType.prototype.setPropertyTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value)
}

/**
 * @param {!proto.introspection.EventType.EventProperty=} opt_value
 * @param {number=} opt_index
 * @return {!proto.introspection.EventType.EventProperty}
 */
proto.introspection.EventType.prototype.addPropertyTypes = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.introspection.EventType.EventProperty,
    opt_index
  )
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.introspection.EventType} returns this
 */
proto.introspection.EventType.prototype.clearPropertyTypesList = function() {
  return this.setPropertyTypesList([])
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.introspection.Runtime.repeatedFields_ = [7]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.Runtime.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.introspection.Runtime.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.Runtime} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.Runtime.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        implementation: jspb.Message.getFieldWithDefault(msg, 1, ''),
        version: jspb.Message.getFieldWithDefault(msg, 2, ''),
        platform: jspb.Message.getFieldWithDefault(msg, 3, ''),
        peerId: jspb.Message.getFieldWithDefault(msg, 4, ''),
        eventTypesList: jspb.Message.toObjectList(
          msg.getEventTypesList(),
          proto.introspection.EventType.toObject,
          includeInstance
        ),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.Runtime}
 */
proto.introspection.Runtime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.Runtime()
  return proto.introspection.Runtime.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.Runtime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.Runtime}
 */
proto.introspection.Runtime.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setImplementation(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setVersion(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setPlatform(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setPeerId(value)
        break
      case 7:
        var value = new proto.introspection.EventType()
        reader.readMessage(
          value,
          proto.introspection.EventType.deserializeBinaryFromReader
        )
        msg.addEventTypes(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.Runtime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.Runtime.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.Runtime} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.Runtime.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined
  f = message.getImplementation()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getVersion()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getPlatform()
  if (f.length > 0) {
    writer.writeString(3, f)
  }
  f = message.getPeerId()
  if (f.length > 0) {
    writer.writeString(4, f)
  }
  f = message.getEventTypesList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.introspection.EventType.serializeBinaryToWriter
    )
  }
}

/**
 * optional string implementation = 1;
 * @return {string}
 */
proto.introspection.Runtime.prototype.getImplementation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.introspection.Runtime} returns this
 */
proto.introspection.Runtime.prototype.setImplementation = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string version = 2;
 * @return {string}
 */
proto.introspection.Runtime.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.introspection.Runtime} returns this
 */
proto.introspection.Runtime.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional string platform = 3;
 * @return {string}
 */
proto.introspection.Runtime.prototype.getPlatform = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/**
 * @param {string} value
 * @return {!proto.introspection.Runtime} returns this
 */
proto.introspection.Runtime.prototype.setPlatform = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional string peer_id = 4;
 * @return {string}
 */
proto.introspection.Runtime.prototype.getPeerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}

/**
 * @param {string} value
 * @return {!proto.introspection.Runtime} returns this
 */
proto.introspection.Runtime.prototype.setPeerId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value)
}

/**
 * repeated EventType event_types = 7;
 * @return {!Array<!proto.introspection.EventType>}
 */
proto.introspection.Runtime.prototype.getEventTypesList = function() {
  return /** @type{!Array<!proto.introspection.EventType>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.introspection.EventType,
    7
  ))
}

/**
 * @param {!Array<!proto.introspection.EventType>} value
 * @return {!proto.introspection.Runtime} returns this
 */
proto.introspection.Runtime.prototype.setEventTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value)
}

/**
 * @param {!proto.introspection.EventType=} opt_value
 * @param {number=} opt_index
 * @return {!proto.introspection.EventType}
 */
proto.introspection.Runtime.prototype.addEventTypes = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    7,
    opt_value,
    proto.introspection.EventType,
    opt_index
  )
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.introspection.Runtime} returns this
 */
proto.introspection.Runtime.prototype.clearEventTypesList = function() {
  return this.setEventTypesList([])
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.EndpointPair.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.introspection.EndpointPair.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.EndpointPair} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.EndpointPair.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        srcMultiaddr: jspb.Message.getFieldWithDefault(msg, 1, ''),
        dstMultiaddr: jspb.Message.getFieldWithDefault(msg, 2, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.EndpointPair}
 */
proto.introspection.EndpointPair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.EndpointPair()
  return proto.introspection.EndpointPair.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.EndpointPair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.EndpointPair}
 */
proto.introspection.EndpointPair.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setSrcMultiaddr(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setDstMultiaddr(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.EndpointPair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.EndpointPair.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.EndpointPair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.EndpointPair.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined
  f = message.getSrcMultiaddr()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getDstMultiaddr()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
}

/**
 * optional string src_multiaddr = 1;
 * @return {string}
 */
proto.introspection.EndpointPair.prototype.getSrcMultiaddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.introspection.EndpointPair} returns this
 */
proto.introspection.EndpointPair.prototype.setSrcMultiaddr = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string dst_multiaddr = 2;
 * @return {string}
 */
proto.introspection.EndpointPair.prototype.getDstMultiaddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.introspection.EndpointPair} returns this
 */
proto.introspection.EndpointPair.prototype.setDstMultiaddr = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.Traffic.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.introspection.Traffic.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.Traffic} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.Traffic.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        trafficIn:
          (f = msg.getTrafficIn()) &&
          proto.introspection.DataGauge.toObject(includeInstance, f),
        trafficOut:
          (f = msg.getTrafficOut()) &&
          proto.introspection.DataGauge.toObject(includeInstance, f),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.Traffic}
 */
proto.introspection.Traffic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.Traffic()
  return proto.introspection.Traffic.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.Traffic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.Traffic}
 */
proto.introspection.Traffic.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.introspection.DataGauge()
        reader.readMessage(
          value,
          proto.introspection.DataGauge.deserializeBinaryFromReader
        )
        msg.setTrafficIn(value)
        break
      case 2:
        var value = new proto.introspection.DataGauge()
        reader.readMessage(
          value,
          proto.introspection.DataGauge.deserializeBinaryFromReader
        )
        msg.setTrafficOut(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.Traffic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.Traffic.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.Traffic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.Traffic.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined
  f = message.getTrafficIn()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.introspection.DataGauge.serializeBinaryToWriter
    )
  }
  f = message.getTrafficOut()
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.introspection.DataGauge.serializeBinaryToWriter
    )
  }
}

/**
 * optional DataGauge traffic_in = 1;
 * @return {?proto.introspection.DataGauge}
 */
proto.introspection.Traffic.prototype.getTrafficIn = function() {
  return /** @type{?proto.introspection.DataGauge} */ (jspb.Message.getWrapperField(
    this,
    proto.introspection.DataGauge,
    1
  ))
}

/**
 * @param {?proto.introspection.DataGauge|undefined} value
 * @return {!proto.introspection.Traffic} returns this
 */
proto.introspection.Traffic.prototype.setTrafficIn = function(value) {
  return jspb.Message.setWrapperField(this, 1, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.introspection.Traffic} returns this
 */
proto.introspection.Traffic.prototype.clearTrafficIn = function() {
  return this.setTrafficIn(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.introspection.Traffic.prototype.hasTrafficIn = function() {
  return jspb.Message.getField(this, 1) != null
}

/**
 * optional DataGauge traffic_out = 2;
 * @return {?proto.introspection.DataGauge}
 */
proto.introspection.Traffic.prototype.getTrafficOut = function() {
  return /** @type{?proto.introspection.DataGauge} */ (jspb.Message.getWrapperField(
    this,
    proto.introspection.DataGauge,
    2
  ))
}

/**
 * @param {?proto.introspection.DataGauge|undefined} value
 * @return {!proto.introspection.Traffic} returns this
 */
proto.introspection.Traffic.prototype.setTrafficOut = function(value) {
  return jspb.Message.setWrapperField(this, 2, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.introspection.Traffic} returns this
 */
proto.introspection.Traffic.prototype.clearTrafficOut = function() {
  return this.setTrafficOut(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.introspection.Traffic.prototype.hasTrafficOut = function() {
  return jspb.Message.getField(this, 2) != null
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.introspection.StreamList.repeatedFields_ = [1, 2]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.StreamList.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.introspection.StreamList.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.StreamList} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.StreamList.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        streamIdsList: msg.getStreamIdsList_asB64(),
        streamsList: jspb.Message.toObjectList(
          msg.getStreamsList(),
          proto.introspection.Stream.toObject,
          includeInstance
        ),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.StreamList}
 */
proto.introspection.StreamList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.StreamList()
  return proto.introspection.StreamList.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.StreamList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.StreamList}
 */
proto.introspection.StreamList.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.addStreamIds(value)
        break
      case 2:
        var value = new proto.introspection.Stream()
        reader.readMessage(
          value,
          proto.introspection.Stream.deserializeBinaryFromReader
        )
        msg.addStreams(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.StreamList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.StreamList.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.StreamList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.StreamList.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined
  f = message.getStreamIdsList_asU8()
  if (f.length > 0) {
    writer.writeRepeatedBytes(1, f)
  }
  f = message.getStreamsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.introspection.Stream.serializeBinaryToWriter
    )
  }
}

/**
 * repeated bytes stream_ids = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.introspection.StreamList.prototype.getStreamIdsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(
    this,
    1
  ))
}

/**
 * repeated bytes stream_ids = 1;
 * This is a type-conversion wrapper around `getStreamIdsList()`
 * @return {!Array<string>}
 */
proto.introspection.StreamList.prototype.getStreamIdsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
    this.getStreamIdsList()
  ))
}

/**
 * repeated bytes stream_ids = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStreamIdsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.introspection.StreamList.prototype.getStreamIdsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
    this.getStreamIdsList()
  ))
}

/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.introspection.StreamList} returns this
 */
proto.introspection.StreamList.prototype.setStreamIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || [])
}

/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.introspection.StreamList} returns this
 */
proto.introspection.StreamList.prototype.addStreamIds = function(
  value,
  opt_index
) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.introspection.StreamList} returns this
 */
proto.introspection.StreamList.prototype.clearStreamIdsList = function() {
  return this.setStreamIdsList([])
}

/**
 * repeated Stream streams = 2;
 * @return {!Array<!proto.introspection.Stream>}
 */
proto.introspection.StreamList.prototype.getStreamsList = function() {
  return /** @type{!Array<!proto.introspection.Stream>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.introspection.Stream,
    2
  ))
}

/**
 * @param {!Array<!proto.introspection.Stream>} value
 * @return {!proto.introspection.StreamList} returns this
 */
proto.introspection.StreamList.prototype.setStreamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value)
}

/**
 * @param {!proto.introspection.Stream=} opt_value
 * @param {number=} opt_index
 * @return {!proto.introspection.Stream}
 */
proto.introspection.StreamList.prototype.addStreams = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.introspection.Stream,
    opt_index
  )
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.introspection.StreamList} returns this
 */
proto.introspection.StreamList.prototype.clearStreamsList = function() {
  return this.setStreamsList([])
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.introspection.Connection.repeatedFields_ = [99]

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.introspection.Connection.oneofGroups_ = [[16, 17]]

/**
 * @enum {number}
 */
proto.introspection.Connection.RelayedOverCase = {
  RELAYED_OVER_NOT_SET: 0,
  CONN_ID: 16,
  CONN: 17,
}

/**
 * @return {proto.introspection.Connection.RelayedOverCase}
 */
proto.introspection.Connection.prototype.getRelayedOverCase = function() {
  return /** @type {proto.introspection.Connection.RelayedOverCase} */ (jspb.Message.computeOneofCase(
    this,
    proto.introspection.Connection.oneofGroups_[0]
  ))
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.Connection.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.introspection.Connection.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.Connection} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.Connection.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        id: msg.getId_asB64(),
        peerId: jspb.Message.getFieldWithDefault(msg, 2, ''),
        status: jspb.Message.getFieldWithDefault(msg, 3, 0),
        transportId: msg.getTransportId_asB64(),
        endpoints:
          (f = msg.getEndpoints()) &&
          proto.introspection.EndpointPair.toObject(includeInstance, f),
        timeline:
          (f = msg.getTimeline()) &&
          proto.introspection.Connection.Timeline.toObject(includeInstance, f),
        role: jspb.Message.getFieldWithDefault(msg, 7, 0),
        traffic:
          (f = msg.getTraffic()) &&
          proto.introspection.Traffic.toObject(includeInstance, f),
        attribs:
          (f = msg.getAttribs()) &&
          proto.introspection.Connection.Attributes.toObject(
            includeInstance,
            f
          ),
        latencyNs: jspb.Message.getFieldWithDefault(msg, 10, 0),
        streams:
          (f = msg.getStreams()) &&
          proto.introspection.StreamList.toObject(includeInstance, f),
        connId: msg.getConnId_asB64(),
        conn:
          (f = msg.getConn()) &&
          proto.introspection.Connection.toObject(includeInstance, f),
        userProvidedTagsList:
          (f = jspb.Message.getRepeatedField(msg, 99)) == null ? undefined : f,
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.Connection}
 */
proto.introspection.Connection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.Connection()
  return proto.introspection.Connection.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.Connection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.Connection}
 */
proto.introspection.Connection.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setId(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setPeerId(value)
        break
      case 3:
        var value = /** @type {!proto.introspection.Status} */ (reader.readEnum())
        msg.setStatus(value)
        break
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setTransportId(value)
        break
      case 5:
        var value = new proto.introspection.EndpointPair()
        reader.readMessage(
          value,
          proto.introspection.EndpointPair.deserializeBinaryFromReader
        )
        msg.setEndpoints(value)
        break
      case 6:
        var value = new proto.introspection.Connection.Timeline()
        reader.readMessage(
          value,
          proto.introspection.Connection.Timeline.deserializeBinaryFromReader
        )
        msg.setTimeline(value)
        break
      case 7:
        var value = /** @type {!proto.introspection.Role} */ (reader.readEnum())
        msg.setRole(value)
        break
      case 8:
        var value = new proto.introspection.Traffic()
        reader.readMessage(
          value,
          proto.introspection.Traffic.deserializeBinaryFromReader
        )
        msg.setTraffic(value)
        break
      case 9:
        var value = new proto.introspection.Connection.Attributes()
        reader.readMessage(
          value,
          proto.introspection.Connection.Attributes.deserializeBinaryFromReader
        )
        msg.setAttribs(value)
        break
      case 10:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setLatencyNs(value)
        break
      case 11:
        var value = new proto.introspection.StreamList()
        reader.readMessage(
          value,
          proto.introspection.StreamList.deserializeBinaryFromReader
        )
        msg.setStreams(value)
        break
      case 16:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setConnId(value)
        break
      case 17:
        var value = new proto.introspection.Connection()
        reader.readMessage(
          value,
          proto.introspection.Connection.deserializeBinaryFromReader
        )
        msg.setConn(value)
        break
      case 99:
        var value = /** @type {string} */ (reader.readString())
        msg.addUserProvidedTags(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.Connection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.Connection.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.Connection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.Connection.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined
  f = message.getId_asU8()
  if (f.length > 0) {
    writer.writeBytes(1, f)
  }
  f = message.getPeerId()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getStatus()
  if (f !== 0.0) {
    writer.writeEnum(3, f)
  }
  f = message.getTransportId_asU8()
  if (f.length > 0) {
    writer.writeBytes(4, f)
  }
  f = message.getEndpoints()
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.introspection.EndpointPair.serializeBinaryToWriter
    )
  }
  f = message.getTimeline()
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.introspection.Connection.Timeline.serializeBinaryToWriter
    )
  }
  f = message.getRole()
  if (f !== 0.0) {
    writer.writeEnum(7, f)
  }
  f = message.getTraffic()
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.introspection.Traffic.serializeBinaryToWriter
    )
  }
  f = message.getAttribs()
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.introspection.Connection.Attributes.serializeBinaryToWriter
    )
  }
  f = message.getLatencyNs()
  if (f !== 0) {
    writer.writeUint64(10, f)
  }
  f = message.getStreams()
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.introspection.StreamList.serializeBinaryToWriter
    )
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 16))
  if (f != null) {
    writer.writeBytes(16, f)
  }
  f = message.getConn()
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.introspection.Connection.serializeBinaryToWriter
    )
  }
  f = message.getUserProvidedTagsList()
  if (f.length > 0) {
    writer.writeRepeatedString(99, f)
  }
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.Connection.Timeline.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.introspection.Connection.Timeline.toObject(
      opt_includeInstance,
      this
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.Connection.Timeline} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.Connection.Timeline.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        openTs: jspb.Message.getFieldWithDefault(msg, 1, 0),
        upgradedTs: jspb.Message.getFieldWithDefault(msg, 2, 0),
        closeTs: jspb.Message.getFieldWithDefault(msg, 3, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.Connection.Timeline}
 */
proto.introspection.Connection.Timeline.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.Connection.Timeline()
  return proto.introspection.Connection.Timeline.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.Connection.Timeline} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.Connection.Timeline}
 */
proto.introspection.Connection.Timeline.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setOpenTs(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setUpgradedTs(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setCloseTs(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.Connection.Timeline.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.Connection.Timeline.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.Connection.Timeline} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.Connection.Timeline.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined
  f = message.getOpenTs()
  if (f !== 0) {
    writer.writeUint64(1, f)
  }
  f = message.getUpgradedTs()
  if (f !== 0) {
    writer.writeUint64(2, f)
  }
  f = message.getCloseTs()
  if (f !== 0) {
    writer.writeUint64(3, f)
  }
}

/**
 * optional uint64 open_ts = 1;
 * @return {number}
 */
proto.introspection.Connection.Timeline.prototype.getOpenTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.Connection.Timeline} returns this
 */
proto.introspection.Connection.Timeline.prototype.setOpenTs = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value)
}

/**
 * optional uint64 upgraded_ts = 2;
 * @return {number}
 */
proto.introspection.Connection.Timeline.prototype.getUpgradedTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.Connection.Timeline} returns this
 */
proto.introspection.Connection.Timeline.prototype.setUpgradedTs = function(
  value
) {
  return jspb.Message.setProto3IntField(this, 2, value)
}

/**
 * optional uint64 close_ts = 3;
 * @return {number}
 */
proto.introspection.Connection.Timeline.prototype.getCloseTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.Connection.Timeline} returns this
 */
proto.introspection.Connection.Timeline.prototype.setCloseTs = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.Connection.Attributes.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.introspection.Connection.Attributes.toObject(
      opt_includeInstance,
      this
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.Connection.Attributes} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.Connection.Attributes.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        multiplexer: jspb.Message.getFieldWithDefault(msg, 1, ''),
        encryption: jspb.Message.getFieldWithDefault(msg, 2, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.Connection.Attributes}
 */
proto.introspection.Connection.Attributes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.Connection.Attributes()
  return proto.introspection.Connection.Attributes.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.Connection.Attributes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.Connection.Attributes}
 */
proto.introspection.Connection.Attributes.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setMultiplexer(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setEncryption(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.Connection.Attributes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.Connection.Attributes.serializeBinaryToWriter(
    this,
    writer
  )
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.Connection.Attributes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.Connection.Attributes.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined
  f = message.getMultiplexer()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getEncryption()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
}

/**
 * optional string multiplexer = 1;
 * @return {string}
 */
proto.introspection.Connection.Attributes.prototype.getMultiplexer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.introspection.Connection.Attributes} returns this
 */
proto.introspection.Connection.Attributes.prototype.setMultiplexer = function(
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string encryption = 2;
 * @return {string}
 */
proto.introspection.Connection.Attributes.prototype.getEncryption = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.introspection.Connection.Attributes} returns this
 */
proto.introspection.Connection.Attributes.prototype.setEncryption = function(
  value
) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.introspection.Connection.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    1,
    ''
  ))
}

/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.introspection.Connection.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getId()))
}

/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.introspection.Connection.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getId()))
}

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.introspection.Connection} returns this
 */
proto.introspection.Connection.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value)
}

/**
 * optional string peer_id = 2;
 * @return {string}
 */
proto.introspection.Connection.prototype.getPeerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.introspection.Connection} returns this
 */
proto.introspection.Connection.prototype.setPeerId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional Status status = 3;
 * @return {!proto.introspection.Status}
 */
proto.introspection.Connection.prototype.getStatus = function() {
  return /** @type {!proto.introspection.Status} */ (jspb.Message.getFieldWithDefault(
    this,
    3,
    0
  ))
}

/**
 * @param {!proto.introspection.Status} value
 * @return {!proto.introspection.Connection} returns this
 */
proto.introspection.Connection.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value)
}

/**
 * optional bytes transport_id = 4;
 * @return {!(string|Uint8Array)}
 */
proto.introspection.Connection.prototype.getTransportId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    4,
    ''
  ))
}

/**
 * optional bytes transport_id = 4;
 * This is a type-conversion wrapper around `getTransportId()`
 * @return {string}
 */
proto.introspection.Connection.prototype.getTransportId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getTransportId()))
}

/**
 * optional bytes transport_id = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransportId()`
 * @return {!Uint8Array}
 */
proto.introspection.Connection.prototype.getTransportId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getTransportId()
  ))
}

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.introspection.Connection} returns this
 */
proto.introspection.Connection.prototype.setTransportId = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value)
}

/**
 * optional EndpointPair endpoints = 5;
 * @return {?proto.introspection.EndpointPair}
 */
proto.introspection.Connection.prototype.getEndpoints = function() {
  return /** @type{?proto.introspection.EndpointPair} */ (jspb.Message.getWrapperField(
    this,
    proto.introspection.EndpointPair,
    5
  ))
}

/**
 * @param {?proto.introspection.EndpointPair|undefined} value
 * @return {!proto.introspection.Connection} returns this
 */
proto.introspection.Connection.prototype.setEndpoints = function(value) {
  return jspb.Message.setWrapperField(this, 5, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.introspection.Connection} returns this
 */
proto.introspection.Connection.prototype.clearEndpoints = function() {
  return this.setEndpoints(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.introspection.Connection.prototype.hasEndpoints = function() {
  return jspb.Message.getField(this, 5) != null
}

/**
 * optional Timeline timeline = 6;
 * @return {?proto.introspection.Connection.Timeline}
 */
proto.introspection.Connection.prototype.getTimeline = function() {
  return /** @type{?proto.introspection.Connection.Timeline} */ (jspb.Message.getWrapperField(
    this,
    proto.introspection.Connection.Timeline,
    6
  ))
}

/**
 * @param {?proto.introspection.Connection.Timeline|undefined} value
 * @return {!proto.introspection.Connection} returns this
 */
proto.introspection.Connection.prototype.setTimeline = function(value) {
  return jspb.Message.setWrapperField(this, 6, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.introspection.Connection} returns this
 */
proto.introspection.Connection.prototype.clearTimeline = function() {
  return this.setTimeline(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.introspection.Connection.prototype.hasTimeline = function() {
  return jspb.Message.getField(this, 6) != null
}

/**
 * optional Role role = 7;
 * @return {!proto.introspection.Role}
 */
proto.introspection.Connection.prototype.getRole = function() {
  return /** @type {!proto.introspection.Role} */ (jspb.Message.getFieldWithDefault(
    this,
    7,
    0
  ))
}

/**
 * @param {!proto.introspection.Role} value
 * @return {!proto.introspection.Connection} returns this
 */
proto.introspection.Connection.prototype.setRole = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value)
}

/**
 * optional Traffic traffic = 8;
 * @return {?proto.introspection.Traffic}
 */
proto.introspection.Connection.prototype.getTraffic = function() {
  return /** @type{?proto.introspection.Traffic} */ (jspb.Message.getWrapperField(
    this,
    proto.introspection.Traffic,
    8
  ))
}

/**
 * @param {?proto.introspection.Traffic|undefined} value
 * @return {!proto.introspection.Connection} returns this
 */
proto.introspection.Connection.prototype.setTraffic = function(value) {
  return jspb.Message.setWrapperField(this, 8, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.introspection.Connection} returns this
 */
proto.introspection.Connection.prototype.clearTraffic = function() {
  return this.setTraffic(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.introspection.Connection.prototype.hasTraffic = function() {
  return jspb.Message.getField(this, 8) != null
}

/**
 * optional Attributes attribs = 9;
 * @return {?proto.introspection.Connection.Attributes}
 */
proto.introspection.Connection.prototype.getAttribs = function() {
  return /** @type{?proto.introspection.Connection.Attributes} */ (jspb.Message.getWrapperField(
    this,
    proto.introspection.Connection.Attributes,
    9
  ))
}

/**
 * @param {?proto.introspection.Connection.Attributes|undefined} value
 * @return {!proto.introspection.Connection} returns this
 */
proto.introspection.Connection.prototype.setAttribs = function(value) {
  return jspb.Message.setWrapperField(this, 9, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.introspection.Connection} returns this
 */
proto.introspection.Connection.prototype.clearAttribs = function() {
  return this.setAttribs(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.introspection.Connection.prototype.hasAttribs = function() {
  return jspb.Message.getField(this, 9) != null
}

/**
 * optional uint64 latency_ns = 10;
 * @return {number}
 */
proto.introspection.Connection.prototype.getLatencyNs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.Connection} returns this
 */
proto.introspection.Connection.prototype.setLatencyNs = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value)
}

/**
 * optional StreamList streams = 11;
 * @return {?proto.introspection.StreamList}
 */
proto.introspection.Connection.prototype.getStreams = function() {
  return /** @type{?proto.introspection.StreamList} */ (jspb.Message.getWrapperField(
    this,
    proto.introspection.StreamList,
    11
  ))
}

/**
 * @param {?proto.introspection.StreamList|undefined} value
 * @return {!proto.introspection.Connection} returns this
 */
proto.introspection.Connection.prototype.setStreams = function(value) {
  return jspb.Message.setWrapperField(this, 11, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.introspection.Connection} returns this
 */
proto.introspection.Connection.prototype.clearStreams = function() {
  return this.setStreams(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.introspection.Connection.prototype.hasStreams = function() {
  return jspb.Message.getField(this, 11) != null
}

/**
 * optional bytes conn_id = 16;
 * @return {!(string|Uint8Array)}
 */
proto.introspection.Connection.prototype.getConnId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    16,
    ''
  ))
}

/**
 * optional bytes conn_id = 16;
 * This is a type-conversion wrapper around `getConnId()`
 * @return {string}
 */
proto.introspection.Connection.prototype.getConnId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getConnId()))
}

/**
 * optional bytes conn_id = 16;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConnId()`
 * @return {!Uint8Array}
 */
proto.introspection.Connection.prototype.getConnId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getConnId()))
}

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.introspection.Connection} returns this
 */
proto.introspection.Connection.prototype.setConnId = function(value) {
  return jspb.Message.setOneofField(
    this,
    16,
    proto.introspection.Connection.oneofGroups_[0],
    value
  )
}

/**
 * Clears the field making it undefined.
 * @return {!proto.introspection.Connection} returns this
 */
proto.introspection.Connection.prototype.clearConnId = function() {
  return jspb.Message.setOneofField(
    this,
    16,
    proto.introspection.Connection.oneofGroups_[0],
    undefined
  )
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.introspection.Connection.prototype.hasConnId = function() {
  return jspb.Message.getField(this, 16) != null
}

/**
 * optional Connection conn = 17;
 * @return {?proto.introspection.Connection}
 */
proto.introspection.Connection.prototype.getConn = function() {
  return /** @type{?proto.introspection.Connection} */ (jspb.Message.getWrapperField(
    this,
    proto.introspection.Connection,
    17
  ))
}

/**
 * @param {?proto.introspection.Connection|undefined} value
 * @return {!proto.introspection.Connection} returns this
 */
proto.introspection.Connection.prototype.setConn = function(value) {
  return jspb.Message.setOneofWrapperField(
    this,
    17,
    proto.introspection.Connection.oneofGroups_[0],
    value
  )
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.introspection.Connection} returns this
 */
proto.introspection.Connection.prototype.clearConn = function() {
  return this.setConn(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.introspection.Connection.prototype.hasConn = function() {
  return jspb.Message.getField(this, 17) != null
}

/**
 * repeated string user_provided_tags = 99;
 * @return {!Array<string>}
 */
proto.introspection.Connection.prototype.getUserProvidedTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 99))
}

/**
 * @param {!Array<string>} value
 * @return {!proto.introspection.Connection} returns this
 */
proto.introspection.Connection.prototype.setUserProvidedTagsList = function(
  value
) {
  return jspb.Message.setField(this, 99, value || [])
}

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.introspection.Connection} returns this
 */
proto.introspection.Connection.prototype.addUserProvidedTags = function(
  value,
  opt_index
) {
  return jspb.Message.addToRepeatedField(this, 99, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.introspection.Connection} returns this
 */
proto.introspection.Connection.prototype.clearUserProvidedTagsList = function() {
  return this.setUserProvidedTagsList([])
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.introspection.Stream.repeatedFields_ = [99]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.Stream.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.introspection.Stream.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.Stream} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.Stream.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        id: msg.getId_asB64(),
        protocol: jspb.Message.getFieldWithDefault(msg, 2, ''),
        role: jspb.Message.getFieldWithDefault(msg, 3, 0),
        traffic:
          (f = msg.getTraffic()) &&
          proto.introspection.Traffic.toObject(includeInstance, f),
        conn:
          (f = msg.getConn()) &&
          proto.introspection.Stream.ConnectionRef.toObject(includeInstance, f),
        timeline:
          (f = msg.getTimeline()) &&
          proto.introspection.Stream.Timeline.toObject(includeInstance, f),
        status: jspb.Message.getFieldWithDefault(msg, 7, 0),
        latencyNs: jspb.Message.getFieldWithDefault(msg, 16, 0),
        userProvidedTagsList:
          (f = jspb.Message.getRepeatedField(msg, 99)) == null ? undefined : f,
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.Stream}
 */
proto.introspection.Stream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.Stream()
  return proto.introspection.Stream.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.Stream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.Stream}
 */
proto.introspection.Stream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setId(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setProtocol(value)
        break
      case 3:
        var value = /** @type {!proto.introspection.Role} */ (reader.readEnum())
        msg.setRole(value)
        break
      case 4:
        var value = new proto.introspection.Traffic()
        reader.readMessage(
          value,
          proto.introspection.Traffic.deserializeBinaryFromReader
        )
        msg.setTraffic(value)
        break
      case 5:
        var value = new proto.introspection.Stream.ConnectionRef()
        reader.readMessage(
          value,
          proto.introspection.Stream.ConnectionRef.deserializeBinaryFromReader
        )
        msg.setConn(value)
        break
      case 6:
        var value = new proto.introspection.Stream.Timeline()
        reader.readMessage(
          value,
          proto.introspection.Stream.Timeline.deserializeBinaryFromReader
        )
        msg.setTimeline(value)
        break
      case 7:
        var value = /** @type {!proto.introspection.Status} */ (reader.readEnum())
        msg.setStatus(value)
        break
      case 16:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setLatencyNs(value)
        break
      case 99:
        var value = /** @type {string} */ (reader.readString())
        msg.addUserProvidedTags(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.Stream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.Stream.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.Stream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.Stream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getId_asU8()
  if (f.length > 0) {
    writer.writeBytes(1, f)
  }
  f = message.getProtocol()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getRole()
  if (f !== 0.0) {
    writer.writeEnum(3, f)
  }
  f = message.getTraffic()
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.introspection.Traffic.serializeBinaryToWriter
    )
  }
  f = message.getConn()
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.introspection.Stream.ConnectionRef.serializeBinaryToWriter
    )
  }
  f = message.getTimeline()
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.introspection.Stream.Timeline.serializeBinaryToWriter
    )
  }
  f = message.getStatus()
  if (f !== 0.0) {
    writer.writeEnum(7, f)
  }
  f = message.getLatencyNs()
  if (f !== 0) {
    writer.writeUint64(16, f)
  }
  f = message.getUserProvidedTagsList()
  if (f.length > 0) {
    writer.writeRepeatedString(99, f)
  }
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.introspection.Stream.ConnectionRef.oneofGroups_ = [[1, 2]]

/**
 * @enum {number}
 */
proto.introspection.Stream.ConnectionRef.ConnectionCase = {
  CONNECTION_NOT_SET: 0,
  CONN: 1,
  CONN_ID: 2,
}

/**
 * @return {proto.introspection.Stream.ConnectionRef.ConnectionCase}
 */
proto.introspection.Stream.ConnectionRef.prototype.getConnectionCase = function() {
  return /** @type {proto.introspection.Stream.ConnectionRef.ConnectionCase} */ (jspb.Message.computeOneofCase(
    this,
    proto.introspection.Stream.ConnectionRef.oneofGroups_[0]
  ))
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.Stream.ConnectionRef.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.introspection.Stream.ConnectionRef.toObject(
      opt_includeInstance,
      this
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.Stream.ConnectionRef} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.Stream.ConnectionRef.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        conn:
          (f = msg.getConn()) &&
          proto.introspection.Connection.toObject(includeInstance, f),
        connId: msg.getConnId_asB64(),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.Stream.ConnectionRef}
 */
proto.introspection.Stream.ConnectionRef.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.Stream.ConnectionRef()
  return proto.introspection.Stream.ConnectionRef.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.Stream.ConnectionRef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.Stream.ConnectionRef}
 */
proto.introspection.Stream.ConnectionRef.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.introspection.Connection()
        reader.readMessage(
          value,
          proto.introspection.Connection.deserializeBinaryFromReader
        )
        msg.setConn(value)
        break
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setConnId(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.Stream.ConnectionRef.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.Stream.ConnectionRef.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.Stream.ConnectionRef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.Stream.ConnectionRef.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined
  f = message.getConn()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.introspection.Connection.serializeBinaryToWriter
    )
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2))
  if (f != null) {
    writer.writeBytes(2, f)
  }
}

/**
 * optional Connection conn = 1;
 * @return {?proto.introspection.Connection}
 */
proto.introspection.Stream.ConnectionRef.prototype.getConn = function() {
  return /** @type{?proto.introspection.Connection} */ (jspb.Message.getWrapperField(
    this,
    proto.introspection.Connection,
    1
  ))
}

/**
 * @param {?proto.introspection.Connection|undefined} value
 * @return {!proto.introspection.Stream.ConnectionRef} returns this
 */
proto.introspection.Stream.ConnectionRef.prototype.setConn = function(value) {
  return jspb.Message.setOneofWrapperField(
    this,
    1,
    proto.introspection.Stream.ConnectionRef.oneofGroups_[0],
    value
  )
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.introspection.Stream.ConnectionRef} returns this
 */
proto.introspection.Stream.ConnectionRef.prototype.clearConn = function() {
  return this.setConn(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.introspection.Stream.ConnectionRef.prototype.hasConn = function() {
  return jspb.Message.getField(this, 1) != null
}

/**
 * optional bytes conn_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.introspection.Stream.ConnectionRef.prototype.getConnId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    2,
    ''
  ))
}

/**
 * optional bytes conn_id = 2;
 * This is a type-conversion wrapper around `getConnId()`
 * @return {string}
 */
proto.introspection.Stream.ConnectionRef.prototype.getConnId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getConnId()))
}

/**
 * optional bytes conn_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConnId()`
 * @return {!Uint8Array}
 */
proto.introspection.Stream.ConnectionRef.prototype.getConnId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getConnId()))
}

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.introspection.Stream.ConnectionRef} returns this
 */
proto.introspection.Stream.ConnectionRef.prototype.setConnId = function(value) {
  return jspb.Message.setOneofField(
    this,
    2,
    proto.introspection.Stream.ConnectionRef.oneofGroups_[0],
    value
  )
}

/**
 * Clears the field making it undefined.
 * @return {!proto.introspection.Stream.ConnectionRef} returns this
 */
proto.introspection.Stream.ConnectionRef.prototype.clearConnId = function() {
  return jspb.Message.setOneofField(
    this,
    2,
    proto.introspection.Stream.ConnectionRef.oneofGroups_[0],
    undefined
  )
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.introspection.Stream.ConnectionRef.prototype.hasConnId = function() {
  return jspb.Message.getField(this, 2) != null
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.Stream.Timeline.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.introspection.Stream.Timeline.toObject(
      opt_includeInstance,
      this
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.Stream.Timeline} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.Stream.Timeline.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        openTs: jspb.Message.getFieldWithDefault(msg, 1, 0),
        closeTs: jspb.Message.getFieldWithDefault(msg, 2, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.Stream.Timeline}
 */
proto.introspection.Stream.Timeline.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.Stream.Timeline()
  return proto.introspection.Stream.Timeline.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.Stream.Timeline} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.Stream.Timeline}
 */
proto.introspection.Stream.Timeline.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setOpenTs(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setCloseTs(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.Stream.Timeline.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.Stream.Timeline.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.Stream.Timeline} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.Stream.Timeline.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined
  f = message.getOpenTs()
  if (f !== 0) {
    writer.writeUint64(1, f)
  }
  f = message.getCloseTs()
  if (f !== 0) {
    writer.writeUint64(2, f)
  }
}

/**
 * optional uint64 open_ts = 1;
 * @return {number}
 */
proto.introspection.Stream.Timeline.prototype.getOpenTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.Stream.Timeline} returns this
 */
proto.introspection.Stream.Timeline.prototype.setOpenTs = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value)
}

/**
 * optional uint64 close_ts = 2;
 * @return {number}
 */
proto.introspection.Stream.Timeline.prototype.getCloseTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.Stream.Timeline} returns this
 */
proto.introspection.Stream.Timeline.prototype.setCloseTs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value)
}

/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.introspection.Stream.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    1,
    ''
  ))
}

/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.introspection.Stream.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getId()))
}

/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.introspection.Stream.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getId()))
}

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.introspection.Stream} returns this
 */
proto.introspection.Stream.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value)
}

/**
 * optional string protocol = 2;
 * @return {string}
 */
proto.introspection.Stream.prototype.getProtocol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.introspection.Stream} returns this
 */
proto.introspection.Stream.prototype.setProtocol = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional Role role = 3;
 * @return {!proto.introspection.Role}
 */
proto.introspection.Stream.prototype.getRole = function() {
  return /** @type {!proto.introspection.Role} */ (jspb.Message.getFieldWithDefault(
    this,
    3,
    0
  ))
}

/**
 * @param {!proto.introspection.Role} value
 * @return {!proto.introspection.Stream} returns this
 */
proto.introspection.Stream.prototype.setRole = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value)
}

/**
 * optional Traffic traffic = 4;
 * @return {?proto.introspection.Traffic}
 */
proto.introspection.Stream.prototype.getTraffic = function() {
  return /** @type{?proto.introspection.Traffic} */ (jspb.Message.getWrapperField(
    this,
    proto.introspection.Traffic,
    4
  ))
}

/**
 * @param {?proto.introspection.Traffic|undefined} value
 * @return {!proto.introspection.Stream} returns this
 */
proto.introspection.Stream.prototype.setTraffic = function(value) {
  return jspb.Message.setWrapperField(this, 4, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.introspection.Stream} returns this
 */
proto.introspection.Stream.prototype.clearTraffic = function() {
  return this.setTraffic(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.introspection.Stream.prototype.hasTraffic = function() {
  return jspb.Message.getField(this, 4) != null
}

/**
 * optional ConnectionRef conn = 5;
 * @return {?proto.introspection.Stream.ConnectionRef}
 */
proto.introspection.Stream.prototype.getConn = function() {
  return /** @type{?proto.introspection.Stream.ConnectionRef} */ (jspb.Message.getWrapperField(
    this,
    proto.introspection.Stream.ConnectionRef,
    5
  ))
}

/**
 * @param {?proto.introspection.Stream.ConnectionRef|undefined} value
 * @return {!proto.introspection.Stream} returns this
 */
proto.introspection.Stream.prototype.setConn = function(value) {
  return jspb.Message.setWrapperField(this, 5, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.introspection.Stream} returns this
 */
proto.introspection.Stream.prototype.clearConn = function() {
  return this.setConn(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.introspection.Stream.prototype.hasConn = function() {
  return jspb.Message.getField(this, 5) != null
}

/**
 * optional Timeline timeline = 6;
 * @return {?proto.introspection.Stream.Timeline}
 */
proto.introspection.Stream.prototype.getTimeline = function() {
  return /** @type{?proto.introspection.Stream.Timeline} */ (jspb.Message.getWrapperField(
    this,
    proto.introspection.Stream.Timeline,
    6
  ))
}

/**
 * @param {?proto.introspection.Stream.Timeline|undefined} value
 * @return {!proto.introspection.Stream} returns this
 */
proto.introspection.Stream.prototype.setTimeline = function(value) {
  return jspb.Message.setWrapperField(this, 6, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.introspection.Stream} returns this
 */
proto.introspection.Stream.prototype.clearTimeline = function() {
  return this.setTimeline(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.introspection.Stream.prototype.hasTimeline = function() {
  return jspb.Message.getField(this, 6) != null
}

/**
 * optional Status status = 7;
 * @return {!proto.introspection.Status}
 */
proto.introspection.Stream.prototype.getStatus = function() {
  return /** @type {!proto.introspection.Status} */ (jspb.Message.getFieldWithDefault(
    this,
    7,
    0
  ))
}

/**
 * @param {!proto.introspection.Status} value
 * @return {!proto.introspection.Stream} returns this
 */
proto.introspection.Stream.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value)
}

/**
 * optional uint64 latency_ns = 16;
 * @return {number}
 */
proto.introspection.Stream.prototype.getLatencyNs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.Stream} returns this
 */
proto.introspection.Stream.prototype.setLatencyNs = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value)
}

/**
 * repeated string user_provided_tags = 99;
 * @return {!Array<string>}
 */
proto.introspection.Stream.prototype.getUserProvidedTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 99))
}

/**
 * @param {!Array<string>} value
 * @return {!proto.introspection.Stream} returns this
 */
proto.introspection.Stream.prototype.setUserProvidedTagsList = function(value) {
  return jspb.Message.setField(this, 99, value || [])
}

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.introspection.Stream} returns this
 */
proto.introspection.Stream.prototype.addUserProvidedTags = function(
  value,
  opt_index
) {
  return jspb.Message.addToRepeatedField(this, 99, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.introspection.Stream} returns this
 */
proto.introspection.Stream.prototype.clearUserProvidedTagsList = function() {
  return this.setUserProvidedTagsList([])
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.introspection.DHT.repeatedFields_ = [5, 8]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.DHT.prototype.toObject = function(opt_includeInstance) {
    return proto.introspection.DHT.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.DHT} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.DHT.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        protocol: jspb.Message.getFieldWithDefault(msg, 1, ''),
        enabled: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
        startTs: jspb.Message.getFieldWithDefault(msg, 3, 0),
        params:
          (f = msg.getParams()) &&
          proto.introspection.DHT.Params.toObject(includeInstance, f),
        bucketsList: jspb.Message.toObjectList(
          msg.getBucketsList(),
          proto.introspection.DHT.Bucket.toObject,
          includeInstance
        ),
        incomingQueries:
          (f = msg.getIncomingQueries()) &&
          proto.introspection.DHT.QueryGauge.toObject(includeInstance, f),
        outgoingQueries:
          (f = msg.getOutgoingQueries()) &&
          proto.introspection.DHT.QueryGauge.toObject(includeInstance, f),
        lookupsList: jspb.Message.toObjectList(
          msg.getLookupsList(),
          proto.introspection.DHT.Lookup.toObject,
          includeInstance
        ),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.DHT}
 */
proto.introspection.DHT.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.DHT()
  return proto.introspection.DHT.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.DHT} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.DHT}
 */
proto.introspection.DHT.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setProtocol(value)
        break
      case 2:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setEnabled(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setStartTs(value)
        break
      case 4:
        var value = new proto.introspection.DHT.Params()
        reader.readMessage(
          value,
          proto.introspection.DHT.Params.deserializeBinaryFromReader
        )
        msg.setParams(value)
        break
      case 5:
        var value = new proto.introspection.DHT.Bucket()
        reader.readMessage(
          value,
          proto.introspection.DHT.Bucket.deserializeBinaryFromReader
        )
        msg.addBuckets(value)
        break
      case 6:
        var value = new proto.introspection.DHT.QueryGauge()
        reader.readMessage(
          value,
          proto.introspection.DHT.QueryGauge.deserializeBinaryFromReader
        )
        msg.setIncomingQueries(value)
        break
      case 7:
        var value = new proto.introspection.DHT.QueryGauge()
        reader.readMessage(
          value,
          proto.introspection.DHT.QueryGauge.deserializeBinaryFromReader
        )
        msg.setOutgoingQueries(value)
        break
      case 8:
        var value = new proto.introspection.DHT.Lookup()
        reader.readMessage(
          value,
          proto.introspection.DHT.Lookup.deserializeBinaryFromReader
        )
        msg.addLookups(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.DHT.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.DHT.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.DHT} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.DHT.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getProtocol()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getEnabled()
  if (f) {
    writer.writeBool(2, f)
  }
  f = message.getStartTs()
  if (f !== 0) {
    writer.writeUint64(3, f)
  }
  f = message.getParams()
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.introspection.DHT.Params.serializeBinaryToWriter
    )
  }
  f = message.getBucketsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.introspection.DHT.Bucket.serializeBinaryToWriter
    )
  }
  f = message.getIncomingQueries()
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.introspection.DHT.QueryGauge.serializeBinaryToWriter
    )
  }
  f = message.getOutgoingQueries()
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.introspection.DHT.QueryGauge.serializeBinaryToWriter
    )
  }
  f = message.getLookupsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.introspection.DHT.Lookup.serializeBinaryToWriter
    )
  }
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.DHT.Params.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.introspection.DHT.Params.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.DHT.Params} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.DHT.Params.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        k: jspb.Message.getFieldWithDefault(msg, 1, 0),
        alpha: jspb.Message.getFieldWithDefault(msg, 2, 0),
        disjointPaths: jspb.Message.getFieldWithDefault(msg, 3, 0),
        beta: jspb.Message.getFieldWithDefault(msg, 4, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.DHT.Params}
 */
proto.introspection.DHT.Params.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.DHT.Params()
  return proto.introspection.DHT.Params.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.DHT.Params} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.DHT.Params}
 */
proto.introspection.DHT.Params.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setK(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setAlpha(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setDisjointPaths(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setBeta(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.DHT.Params.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.DHT.Params.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.DHT.Params} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.DHT.Params.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined
  f = message.getK()
  if (f !== 0) {
    writer.writeUint64(1, f)
  }
  f = message.getAlpha()
  if (f !== 0) {
    writer.writeUint64(2, f)
  }
  f = message.getDisjointPaths()
  if (f !== 0) {
    writer.writeUint64(3, f)
  }
  f = message.getBeta()
  if (f !== 0) {
    writer.writeUint64(4, f)
  }
}

/**
 * optional uint64 k = 1;
 * @return {number}
 */
proto.introspection.DHT.Params.prototype.getK = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.DHT.Params} returns this
 */
proto.introspection.DHT.Params.prototype.setK = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value)
}

/**
 * optional uint64 alpha = 2;
 * @return {number}
 */
proto.introspection.DHT.Params.prototype.getAlpha = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.DHT.Params} returns this
 */
proto.introspection.DHT.Params.prototype.setAlpha = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value)
}

/**
 * optional uint64 disjoint_paths = 3;
 * @return {number}
 */
proto.introspection.DHT.Params.prototype.getDisjointPaths = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.DHT.Params} returns this
 */
proto.introspection.DHT.Params.prototype.setDisjointPaths = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value)
}

/**
 * optional uint64 beta = 4;
 * @return {number}
 */
proto.introspection.DHT.Params.prototype.getBeta = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.DHT.Params} returns this
 */
proto.introspection.DHT.Params.prototype.setBeta = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.DHT.PeerInDHT.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.introspection.DHT.PeerInDHT.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.DHT.PeerInDHT} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.DHT.PeerInDHT.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        peerId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        status: jspb.Message.getFieldWithDefault(msg, 2, 0),
        ageInBucket: jspb.Message.getFieldWithDefault(msg, 3, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.DHT.PeerInDHT}
 */
proto.introspection.DHT.PeerInDHT.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.DHT.PeerInDHT()
  return proto.introspection.DHT.PeerInDHT.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.DHT.PeerInDHT} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.DHT.PeerInDHT}
 */
proto.introspection.DHT.PeerInDHT.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setPeerId(value)
        break
      case 2:
        var value = /** @type {!proto.introspection.DHT.PeerInDHT.Status} */ (reader.readEnum())
        msg.setStatus(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setAgeInBucket(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.DHT.PeerInDHT.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.DHT.PeerInDHT.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.DHT.PeerInDHT} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.DHT.PeerInDHT.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined
  f = message.getPeerId()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getStatus()
  if (f !== 0.0) {
    writer.writeEnum(2, f)
  }
  f = message.getAgeInBucket()
  if (f !== 0) {
    writer.writeUint32(3, f)
  }
}

/**
 * @enum {number}
 */
proto.introspection.DHT.PeerInDHT.Status = {
  ACTIVE: 0,
  MISSING: 1,
  REJECTED: 2,
  CANDIDATE: 3,
}

/**
 * optional string peer_id = 1;
 * @return {string}
 */
proto.introspection.DHT.PeerInDHT.prototype.getPeerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.introspection.DHT.PeerInDHT} returns this
 */
proto.introspection.DHT.PeerInDHT.prototype.setPeerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional Status status = 2;
 * @return {!proto.introspection.DHT.PeerInDHT.Status}
 */
proto.introspection.DHT.PeerInDHT.prototype.getStatus = function() {
  return /** @type {!proto.introspection.DHT.PeerInDHT.Status} */ (jspb.Message.getFieldWithDefault(
    this,
    2,
    0
  ))
}

/**
 * @param {!proto.introspection.DHT.PeerInDHT.Status} value
 * @return {!proto.introspection.DHT.PeerInDHT} returns this
 */
proto.introspection.DHT.PeerInDHT.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value)
}

/**
 * optional uint32 age_in_bucket = 3;
 * @return {number}
 */
proto.introspection.DHT.PeerInDHT.prototype.getAgeInBucket = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.DHT.PeerInDHT} returns this
 */
proto.introspection.DHT.PeerInDHT.prototype.setAgeInBucket = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value)
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.introspection.DHT.Bucket.repeatedFields_ = [2]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.DHT.Bucket.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.introspection.DHT.Bucket.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.DHT.Bucket} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.DHT.Bucket.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        cpl: jspb.Message.getFieldWithDefault(msg, 1, 0),
        peersList: jspb.Message.toObjectList(
          msg.getPeersList(),
          proto.introspection.DHT.PeerInDHT.toObject,
          includeInstance
        ),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.DHT.Bucket}
 */
proto.introspection.DHT.Bucket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.DHT.Bucket()
  return proto.introspection.DHT.Bucket.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.DHT.Bucket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.DHT.Bucket}
 */
proto.introspection.DHT.Bucket.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setCpl(value)
        break
      case 2:
        var value = new proto.introspection.DHT.PeerInDHT()
        reader.readMessage(
          value,
          proto.introspection.DHT.PeerInDHT.deserializeBinaryFromReader
        )
        msg.addPeers(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.DHT.Bucket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.DHT.Bucket.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.DHT.Bucket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.DHT.Bucket.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined
  f = message.getCpl()
  if (f !== 0) {
    writer.writeUint32(1, f)
  }
  f = message.getPeersList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.introspection.DHT.PeerInDHT.serializeBinaryToWriter
    )
  }
}

/**
 * optional uint32 cpl = 1;
 * @return {number}
 */
proto.introspection.DHT.Bucket.prototype.getCpl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.DHT.Bucket} returns this
 */
proto.introspection.DHT.Bucket.prototype.setCpl = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value)
}

/**
 * repeated PeerInDHT peers = 2;
 * @return {!Array<!proto.introspection.DHT.PeerInDHT>}
 */
proto.introspection.DHT.Bucket.prototype.getPeersList = function() {
  return /** @type{!Array<!proto.introspection.DHT.PeerInDHT>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.introspection.DHT.PeerInDHT,
    2
  ))
}

/**
 * @param {!Array<!proto.introspection.DHT.PeerInDHT>} value
 * @return {!proto.introspection.DHT.Bucket} returns this
 */
proto.introspection.DHT.Bucket.prototype.setPeersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value)
}

/**
 * @param {!proto.introspection.DHT.PeerInDHT=} opt_value
 * @param {number=} opt_index
 * @return {!proto.introspection.DHT.PeerInDHT}
 */
proto.introspection.DHT.Bucket.prototype.addPeers = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.introspection.DHT.PeerInDHT,
    opt_index
  )
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.introspection.DHT.Bucket} returns this
 */
proto.introspection.DHT.Bucket.prototype.clearPeersList = function() {
  return this.setPeersList([])
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.introspection.DHT.Query.repeatedFields_ = [4]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.DHT.Query.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.introspection.DHT.Query.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.DHT.Query} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.DHT.Query.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        target: jspb.Message.getFieldWithDefault(msg, 1, ''),
        startTs: jspb.Message.getFieldWithDefault(msg, 2, 0),
        endTs: jspb.Message.getFieldWithDefault(msg, 3, 0),
        peerIdList:
          (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
        status: jspb.Message.getFieldWithDefault(msg, 5, ''),
        distance: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.DHT.Query}
 */
proto.introspection.DHT.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.DHT.Query()
  return proto.introspection.DHT.Query.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.DHT.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.DHT.Query}
 */
proto.introspection.DHT.Query.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setTarget(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setStartTs(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setEndTs(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.addPeerId(value)
        break
      case 5:
        var value = /** @type {string} */ (reader.readString())
        msg.setStatus(value)
        break
      case 6:
        var value = /** @type {number} */ (reader.readFloat())
        msg.setDistance(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.DHT.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.DHT.Query.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.DHT.Query} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.DHT.Query.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined
  f = message.getTarget()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getStartTs()
  if (f !== 0) {
    writer.writeUint64(2, f)
  }
  f = message.getEndTs()
  if (f !== 0) {
    writer.writeUint64(3, f)
  }
  f = message.getPeerIdList()
  if (f.length > 0) {
    writer.writeRepeatedString(4, f)
  }
  f = message.getStatus()
  if (f.length > 0) {
    writer.writeString(5, f)
  }
  f = message.getDistance()
  if (f !== 0.0) {
    writer.writeFloat(6, f)
  }
}

/**
 * optional string target = 1;
 * @return {string}
 */
proto.introspection.DHT.Query.prototype.getTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.introspection.DHT.Query} returns this
 */
proto.introspection.DHT.Query.prototype.setTarget = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional uint64 start_ts = 2;
 * @return {number}
 */
proto.introspection.DHT.Query.prototype.getStartTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.DHT.Query} returns this
 */
proto.introspection.DHT.Query.prototype.setStartTs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value)
}

/**
 * optional uint64 end_ts = 3;
 * @return {number}
 */
proto.introspection.DHT.Query.prototype.getEndTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.DHT.Query} returns this
 */
proto.introspection.DHT.Query.prototype.setEndTs = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value)
}

/**
 * repeated string peer_id = 4;
 * @return {!Array<string>}
 */
proto.introspection.DHT.Query.prototype.getPeerIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4))
}

/**
 * @param {!Array<string>} value
 * @return {!proto.introspection.DHT.Query} returns this
 */
proto.introspection.DHT.Query.prototype.setPeerIdList = function(value) {
  return jspb.Message.setField(this, 4, value || [])
}

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.introspection.DHT.Query} returns this
 */
proto.introspection.DHT.Query.prototype.addPeerId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.introspection.DHT.Query} returns this
 */
proto.introspection.DHT.Query.prototype.clearPeerIdList = function() {
  return this.setPeerIdList([])
}

/**
 * optional string status = 5;
 * @return {string}
 */
proto.introspection.DHT.Query.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
}

/**
 * @param {string} value
 * @return {!proto.introspection.DHT.Query} returns this
 */
proto.introspection.DHT.Query.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value)
}

/**
 * optional float distance = 6;
 * @return {number}
 */
proto.introspection.DHT.Query.prototype.getDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(
    this,
    6,
    0.0
  ))
}

/**
 * @param {number} value
 * @return {!proto.introspection.DHT.Query} returns this
 */
proto.introspection.DHT.Query.prototype.setDistance = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value)
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.introspection.DHT.Lookup.repeatedFields_ = [4]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.DHT.Lookup.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.introspection.DHT.Lookup.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.DHT.Lookup} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.DHT.Lookup.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        target: jspb.Message.getFieldWithDefault(msg, 1, ''),
        startTs: jspb.Message.getFieldWithDefault(msg, 2, 0),
        endTs: jspb.Message.getFieldWithDefault(msg, 3, 0),
        queriesList: jspb.Message.toObjectList(
          msg.getQueriesList(),
          proto.introspection.DHT.Query.toObject,
          includeInstance
        ),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.DHT.Lookup}
 */
proto.introspection.DHT.Lookup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.DHT.Lookup()
  return proto.introspection.DHT.Lookup.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.DHT.Lookup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.DHT.Lookup}
 */
proto.introspection.DHT.Lookup.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setTarget(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setStartTs(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setEndTs(value)
        break
      case 4:
        var value = new proto.introspection.DHT.Query()
        reader.readMessage(
          value,
          proto.introspection.DHT.Query.deserializeBinaryFromReader
        )
        msg.addQueries(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.DHT.Lookup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.DHT.Lookup.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.DHT.Lookup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.DHT.Lookup.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined
  f = message.getTarget()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getStartTs()
  if (f !== 0) {
    writer.writeUint64(2, f)
  }
  f = message.getEndTs()
  if (f !== 0) {
    writer.writeUint64(3, f)
  }
  f = message.getQueriesList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.introspection.DHT.Query.serializeBinaryToWriter
    )
  }
}

/**
 * optional string target = 1;
 * @return {string}
 */
proto.introspection.DHT.Lookup.prototype.getTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.introspection.DHT.Lookup} returns this
 */
proto.introspection.DHT.Lookup.prototype.setTarget = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional uint64 start_ts = 2;
 * @return {number}
 */
proto.introspection.DHT.Lookup.prototype.getStartTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.DHT.Lookup} returns this
 */
proto.introspection.DHT.Lookup.prototype.setStartTs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value)
}

/**
 * optional uint64 end_ts = 3;
 * @return {number}
 */
proto.introspection.DHT.Lookup.prototype.getEndTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.DHT.Lookup} returns this
 */
proto.introspection.DHT.Lookup.prototype.setEndTs = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value)
}

/**
 * repeated Query queries = 4;
 * @return {!Array<!proto.introspection.DHT.Query>}
 */
proto.introspection.DHT.Lookup.prototype.getQueriesList = function() {
  return /** @type{!Array<!proto.introspection.DHT.Query>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.introspection.DHT.Query,
    4
  ))
}

/**
 * @param {!Array<!proto.introspection.DHT.Query>} value
 * @return {!proto.introspection.DHT.Lookup} returns this
 */
proto.introspection.DHT.Lookup.prototype.setQueriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value)
}

/**
 * @param {!proto.introspection.DHT.Query=} opt_value
 * @param {number=} opt_index
 * @return {!proto.introspection.DHT.Query}
 */
proto.introspection.DHT.Lookup.prototype.addQueries = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    4,
    opt_value,
    proto.introspection.DHT.Query,
    opt_index
  )
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.introspection.DHT.Lookup} returns this
 */
proto.introspection.DHT.Lookup.prototype.clearQueriesList = function() {
  return this.setQueriesList([])
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.DHT.QueryGauge.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.introspection.DHT.QueryGauge.toObject(
      opt_includeInstance,
      this
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.DHT.QueryGauge} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.DHT.QueryGauge.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getFieldWithDefault(msg, 1, 0),
        error: jspb.Message.getFieldWithDefault(msg, 2, 0),
        timeout: jspb.Message.getFieldWithDefault(msg, 3, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.DHT.QueryGauge}
 */
proto.introspection.DHT.QueryGauge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.DHT.QueryGauge()
  return proto.introspection.DHT.QueryGauge.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.DHT.QueryGauge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.DHT.QueryGauge}
 */
proto.introspection.DHT.QueryGauge.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setSuccess(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setError(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setTimeout(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.DHT.QueryGauge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.DHT.QueryGauge.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.DHT.QueryGauge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.DHT.QueryGauge.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined
  f = message.getSuccess()
  if (f !== 0) {
    writer.writeUint64(1, f)
  }
  f = message.getError()
  if (f !== 0) {
    writer.writeUint64(2, f)
  }
  f = message.getTimeout()
  if (f !== 0) {
    writer.writeUint64(3, f)
  }
}

/**
 * optional uint64 success = 1;
 * @return {number}
 */
proto.introspection.DHT.QueryGauge.prototype.getSuccess = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.DHT.QueryGauge} returns this
 */
proto.introspection.DHT.QueryGauge.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value)
}

/**
 * optional uint64 error = 2;
 * @return {number}
 */
proto.introspection.DHT.QueryGauge.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.DHT.QueryGauge} returns this
 */
proto.introspection.DHT.QueryGauge.prototype.setError = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value)
}

/**
 * optional uint64 timeout = 3;
 * @return {number}
 */
proto.introspection.DHT.QueryGauge.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.DHT.QueryGauge} returns this
 */
proto.introspection.DHT.QueryGauge.prototype.setTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value)
}

/**
 * optional string protocol = 1;
 * @return {string}
 */
proto.introspection.DHT.prototype.getProtocol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.introspection.DHT} returns this
 */
proto.introspection.DHT.prototype.setProtocol = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional bool enabled = 2;
 * @return {boolean}
 */
proto.introspection.DHT.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(
    this,
    2,
    false
  ))
}

/**
 * @param {boolean} value
 * @return {!proto.introspection.DHT} returns this
 */
proto.introspection.DHT.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value)
}

/**
 * optional uint64 start_ts = 3;
 * @return {number}
 */
proto.introspection.DHT.prototype.getStartTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.DHT} returns this
 */
proto.introspection.DHT.prototype.setStartTs = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value)
}

/**
 * optional Params params = 4;
 * @return {?proto.introspection.DHT.Params}
 */
proto.introspection.DHT.prototype.getParams = function() {
  return /** @type{?proto.introspection.DHT.Params} */ (jspb.Message.getWrapperField(
    this,
    proto.introspection.DHT.Params,
    4
  ))
}

/**
 * @param {?proto.introspection.DHT.Params|undefined} value
 * @return {!proto.introspection.DHT} returns this
 */
proto.introspection.DHT.prototype.setParams = function(value) {
  return jspb.Message.setWrapperField(this, 4, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.introspection.DHT} returns this
 */
proto.introspection.DHT.prototype.clearParams = function() {
  return this.setParams(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.introspection.DHT.prototype.hasParams = function() {
  return jspb.Message.getField(this, 4) != null
}

/**
 * repeated Bucket buckets = 5;
 * @return {!Array<!proto.introspection.DHT.Bucket>}
 */
proto.introspection.DHT.prototype.getBucketsList = function() {
  return /** @type{!Array<!proto.introspection.DHT.Bucket>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.introspection.DHT.Bucket,
    5
  ))
}

/**
 * @param {!Array<!proto.introspection.DHT.Bucket>} value
 * @return {!proto.introspection.DHT} returns this
 */
proto.introspection.DHT.prototype.setBucketsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value)
}

/**
 * @param {!proto.introspection.DHT.Bucket=} opt_value
 * @param {number=} opt_index
 * @return {!proto.introspection.DHT.Bucket}
 */
proto.introspection.DHT.prototype.addBuckets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    5,
    opt_value,
    proto.introspection.DHT.Bucket,
    opt_index
  )
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.introspection.DHT} returns this
 */
proto.introspection.DHT.prototype.clearBucketsList = function() {
  return this.setBucketsList([])
}

/**
 * optional QueryGauge incoming_queries = 6;
 * @return {?proto.introspection.DHT.QueryGauge}
 */
proto.introspection.DHT.prototype.getIncomingQueries = function() {
  return /** @type{?proto.introspection.DHT.QueryGauge} */ (jspb.Message.getWrapperField(
    this,
    proto.introspection.DHT.QueryGauge,
    6
  ))
}

/**
 * @param {?proto.introspection.DHT.QueryGauge|undefined} value
 * @return {!proto.introspection.DHT} returns this
 */
proto.introspection.DHT.prototype.setIncomingQueries = function(value) {
  return jspb.Message.setWrapperField(this, 6, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.introspection.DHT} returns this
 */
proto.introspection.DHT.prototype.clearIncomingQueries = function() {
  return this.setIncomingQueries(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.introspection.DHT.prototype.hasIncomingQueries = function() {
  return jspb.Message.getField(this, 6) != null
}

/**
 * optional QueryGauge outgoing_queries = 7;
 * @return {?proto.introspection.DHT.QueryGauge}
 */
proto.introspection.DHT.prototype.getOutgoingQueries = function() {
  return /** @type{?proto.introspection.DHT.QueryGauge} */ (jspb.Message.getWrapperField(
    this,
    proto.introspection.DHT.QueryGauge,
    7
  ))
}

/**
 * @param {?proto.introspection.DHT.QueryGauge|undefined} value
 * @return {!proto.introspection.DHT} returns this
 */
proto.introspection.DHT.prototype.setOutgoingQueries = function(value) {
  return jspb.Message.setWrapperField(this, 7, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.introspection.DHT} returns this
 */
proto.introspection.DHT.prototype.clearOutgoingQueries = function() {
  return this.setOutgoingQueries(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.introspection.DHT.prototype.hasOutgoingQueries = function() {
  return jspb.Message.getField(this, 7) != null
}

/**
 * repeated Lookup lookups = 8;
 * @return {!Array<!proto.introspection.DHT.Lookup>}
 */
proto.introspection.DHT.prototype.getLookupsList = function() {
  return /** @type{!Array<!proto.introspection.DHT.Lookup>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.introspection.DHT.Lookup,
    8
  ))
}

/**
 * @param {!Array<!proto.introspection.DHT.Lookup>} value
 * @return {!proto.introspection.DHT} returns this
 */
proto.introspection.DHT.prototype.setLookupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value)
}

/**
 * @param {!proto.introspection.DHT.Lookup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.introspection.DHT.Lookup}
 */
proto.introspection.DHT.prototype.addLookups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    8,
    opt_value,
    proto.introspection.DHT.Lookup,
    opt_index
  )
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.introspection.DHT} returns this
 */
proto.introspection.DHT.prototype.clearLookupsList = function() {
  return this.setLookupsList([])
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.introspection.Subsystems.repeatedFields_ = [1]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.Subsystems.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.introspection.Subsystems.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.Subsystems} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.Subsystems.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        connectionsList: jspb.Message.toObjectList(
          msg.getConnectionsList(),
          proto.introspection.Connection.toObject,
          includeInstance
        ),
        dht:
          (f = msg.getDht()) &&
          proto.introspection.DHT.toObject(includeInstance, f),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.Subsystems}
 */
proto.introspection.Subsystems.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.Subsystems()
  return proto.introspection.Subsystems.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.Subsystems} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.Subsystems}
 */
proto.introspection.Subsystems.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.introspection.Connection()
        reader.readMessage(
          value,
          proto.introspection.Connection.deserializeBinaryFromReader
        )
        msg.addConnections(value)
        break
      case 2:
        var value = new proto.introspection.DHT()
        reader.readMessage(
          value,
          proto.introspection.DHT.deserializeBinaryFromReader
        )
        msg.setDht(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.Subsystems.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.Subsystems.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.Subsystems} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.Subsystems.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined
  f = message.getConnectionsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.introspection.Connection.serializeBinaryToWriter
    )
  }
  f = message.getDht()
  if (f != null) {
    writer.writeMessage(2, f, proto.introspection.DHT.serializeBinaryToWriter)
  }
}

/**
 * repeated Connection connections = 1;
 * @return {!Array<!proto.introspection.Connection>}
 */
proto.introspection.Subsystems.prototype.getConnectionsList = function() {
  return /** @type{!Array<!proto.introspection.Connection>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.introspection.Connection,
    1
  ))
}

/**
 * @param {!Array<!proto.introspection.Connection>} value
 * @return {!proto.introspection.Subsystems} returns this
 */
proto.introspection.Subsystems.prototype.setConnectionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value)
}

/**
 * @param {!proto.introspection.Connection=} opt_value
 * @param {number=} opt_index
 * @return {!proto.introspection.Connection}
 */
proto.introspection.Subsystems.prototype.addConnections = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.introspection.Connection,
    opt_index
  )
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.introspection.Subsystems} returns this
 */
proto.introspection.Subsystems.prototype.clearConnectionsList = function() {
  return this.setConnectionsList([])
}

/**
 * optional DHT dht = 2;
 * @return {?proto.introspection.DHT}
 */
proto.introspection.Subsystems.prototype.getDht = function() {
  return /** @type{?proto.introspection.DHT} */ (jspb.Message.getWrapperField(
    this,
    proto.introspection.DHT,
    2
  ))
}

/**
 * @param {?proto.introspection.DHT|undefined} value
 * @return {!proto.introspection.Subsystems} returns this
 */
proto.introspection.Subsystems.prototype.setDht = function(value) {
  return jspb.Message.setWrapperField(this, 2, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.introspection.Subsystems} returns this
 */
proto.introspection.Subsystems.prototype.clearDht = function() {
  return this.setDht(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.introspection.Subsystems.prototype.hasDht = function() {
  return jspb.Message.getField(this, 2) != null
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.State.prototype.toObject = function(opt_includeInstance) {
    return proto.introspection.State.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.State} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.State.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        subsystems:
          (f = msg.getSubsystems()) &&
          proto.introspection.Subsystems.toObject(includeInstance, f),
        traffic:
          (f = msg.getTraffic()) &&
          proto.introspection.Traffic.toObject(includeInstance, f),
        instantTs: jspb.Message.getFieldWithDefault(msg, 3, 0),
        startTs: jspb.Message.getFieldWithDefault(msg, 4, 0),
        snapshotDurationMs: jspb.Message.getFieldWithDefault(msg, 5, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.State}
 */
proto.introspection.State.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.State()
  return proto.introspection.State.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.State} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.State}
 */
proto.introspection.State.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.introspection.Subsystems()
        reader.readMessage(
          value,
          proto.introspection.Subsystems.deserializeBinaryFromReader
        )
        msg.setSubsystems(value)
        break
      case 2:
        var value = new proto.introspection.Traffic()
        reader.readMessage(
          value,
          proto.introspection.Traffic.deserializeBinaryFromReader
        )
        msg.setTraffic(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setInstantTs(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setStartTs(value)
        break
      case 5:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setSnapshotDurationMs(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.State.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.State.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.State} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.State.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getSubsystems()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.introspection.Subsystems.serializeBinaryToWriter
    )
  }
  f = message.getTraffic()
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.introspection.Traffic.serializeBinaryToWriter
    )
  }
  f = message.getInstantTs()
  if (f !== 0) {
    writer.writeUint64(3, f)
  }
  f = message.getStartTs()
  if (f !== 0) {
    writer.writeUint64(4, f)
  }
  f = message.getSnapshotDurationMs()
  if (f !== 0) {
    writer.writeUint32(5, f)
  }
}

/**
 * optional Subsystems subsystems = 1;
 * @return {?proto.introspection.Subsystems}
 */
proto.introspection.State.prototype.getSubsystems = function() {
  return /** @type{?proto.introspection.Subsystems} */ (jspb.Message.getWrapperField(
    this,
    proto.introspection.Subsystems,
    1
  ))
}

/**
 * @param {?proto.introspection.Subsystems|undefined} value
 * @return {!proto.introspection.State} returns this
 */
proto.introspection.State.prototype.setSubsystems = function(value) {
  return jspb.Message.setWrapperField(this, 1, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.introspection.State} returns this
 */
proto.introspection.State.prototype.clearSubsystems = function() {
  return this.setSubsystems(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.introspection.State.prototype.hasSubsystems = function() {
  return jspb.Message.getField(this, 1) != null
}

/**
 * optional Traffic traffic = 2;
 * @return {?proto.introspection.Traffic}
 */
proto.introspection.State.prototype.getTraffic = function() {
  return /** @type{?proto.introspection.Traffic} */ (jspb.Message.getWrapperField(
    this,
    proto.introspection.Traffic,
    2
  ))
}

/**
 * @param {?proto.introspection.Traffic|undefined} value
 * @return {!proto.introspection.State} returns this
 */
proto.introspection.State.prototype.setTraffic = function(value) {
  return jspb.Message.setWrapperField(this, 2, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.introspection.State} returns this
 */
proto.introspection.State.prototype.clearTraffic = function() {
  return this.setTraffic(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.introspection.State.prototype.hasTraffic = function() {
  return jspb.Message.getField(this, 2) != null
}

/**
 * optional uint64 instant_ts = 3;
 * @return {number}
 */
proto.introspection.State.prototype.getInstantTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.State} returns this
 */
proto.introspection.State.prototype.setInstantTs = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value)
}

/**
 * optional uint64 start_ts = 4;
 * @return {number}
 */
proto.introspection.State.prototype.getStartTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.State} returns this
 */
proto.introspection.State.prototype.setStartTs = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value)
}

/**
 * optional uint32 snapshot_duration_ms = 5;
 * @return {number}
 */
proto.introspection.State.prototype.getSnapshotDurationMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.State} returns this
 */
proto.introspection.State.prototype.setSnapshotDurationMs = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.Event.prototype.toObject = function(opt_includeInstance) {
    return proto.introspection.Event.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.Event} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.Event.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        type:
          (f = msg.getType()) &&
          proto.introspection.EventType.toObject(includeInstance, f),
        ts: jspb.Message.getFieldWithDefault(msg, 2, 0),
        content: jspb.Message.getFieldWithDefault(msg, 3, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.Event}
 */
proto.introspection.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.Event()
  return proto.introspection.Event.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.Event}
 */
proto.introspection.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.introspection.EventType()
        reader.readMessage(
          value,
          proto.introspection.EventType.deserializeBinaryFromReader
        )
        msg.setType(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setTs(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setContent(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.Event.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getType()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.introspection.EventType.serializeBinaryToWriter
    )
  }
  f = message.getTs()
  if (f !== 0) {
    writer.writeUint64(2, f)
  }
  f = message.getContent()
  if (f.length > 0) {
    writer.writeString(3, f)
  }
}

/**
 * optional EventType type = 1;
 * @return {?proto.introspection.EventType}
 */
proto.introspection.Event.prototype.getType = function() {
  return /** @type{?proto.introspection.EventType} */ (jspb.Message.getWrapperField(
    this,
    proto.introspection.EventType,
    1
  ))
}

/**
 * @param {?proto.introspection.EventType|undefined} value
 * @return {!proto.introspection.Event} returns this
 */
proto.introspection.Event.prototype.setType = function(value) {
  return jspb.Message.setWrapperField(this, 1, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.introspection.Event} returns this
 */
proto.introspection.Event.prototype.clearType = function() {
  return this.setType(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.introspection.Event.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null
}

/**
 * optional uint64 ts = 2;
 * @return {number}
 */
proto.introspection.Event.prototype.getTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.Event} returns this
 */
proto.introspection.Event.prototype.setTs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value)
}

/**
 * optional string content = 3;
 * @return {string}
 */
proto.introspection.Event.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/**
 * @param {string} value
 * @return {!proto.introspection.Event} returns this
 */
proto.introspection.Event.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.introspection.ServerMessage.oneofGroups_ = [[2, 3, 4, 5, 6]]

/**
 * @enum {number}
 */
proto.introspection.ServerMessage.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  STATE: 2,
  RUNTIME: 3,
  EVENT: 4,
  RESPONSE: 5,
  NOTICE: 6,
}

/**
 * @return {proto.introspection.ServerMessage.PayloadCase}
 */
proto.introspection.ServerMessage.prototype.getPayloadCase = function() {
  return /** @type {proto.introspection.ServerMessage.PayloadCase} */ (jspb.Message.computeOneofCase(
    this,
    proto.introspection.ServerMessage.oneofGroups_[0]
  ))
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.ServerMessage.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.introspection.ServerMessage.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.ServerMessage} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.ServerMessage.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        version:
          (f = msg.getVersion()) &&
          proto.introspection.Version.toObject(includeInstance, f),
        state:
          (f = msg.getState()) &&
          proto.introspection.State.toObject(includeInstance, f),
        runtime:
          (f = msg.getRuntime()) &&
          proto.introspection.Runtime.toObject(includeInstance, f),
        event:
          (f = msg.getEvent()) &&
          proto.introspection.Event.toObject(includeInstance, f),
        response:
          (f = msg.getResponse()) &&
          proto.introspection.CommandResponse.toObject(includeInstance, f),
        notice:
          (f = msg.getNotice()) &&
          proto.introspection.ServerNotice.toObject(includeInstance, f),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.ServerMessage}
 */
proto.introspection.ServerMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.ServerMessage()
  return proto.introspection.ServerMessage.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.ServerMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.ServerMessage}
 */
proto.introspection.ServerMessage.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.introspection.Version()
        reader.readMessage(
          value,
          proto.introspection.Version.deserializeBinaryFromReader
        )
        msg.setVersion(value)
        break
      case 2:
        var value = new proto.introspection.State()
        reader.readMessage(
          value,
          proto.introspection.State.deserializeBinaryFromReader
        )
        msg.setState(value)
        break
      case 3:
        var value = new proto.introspection.Runtime()
        reader.readMessage(
          value,
          proto.introspection.Runtime.deserializeBinaryFromReader
        )
        msg.setRuntime(value)
        break
      case 4:
        var value = new proto.introspection.Event()
        reader.readMessage(
          value,
          proto.introspection.Event.deserializeBinaryFromReader
        )
        msg.setEvent(value)
        break
      case 5:
        var value = new proto.introspection.CommandResponse()
        reader.readMessage(
          value,
          proto.introspection.CommandResponse.deserializeBinaryFromReader
        )
        msg.setResponse(value)
        break
      case 6:
        var value = new proto.introspection.ServerNotice()
        reader.readMessage(
          value,
          proto.introspection.ServerNotice.deserializeBinaryFromReader
        )
        msg.setNotice(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.ServerMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.ServerMessage.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.ServerMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.ServerMessage.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined
  f = message.getVersion()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.introspection.Version.serializeBinaryToWriter
    )
  }
  f = message.getState()
  if (f != null) {
    writer.writeMessage(2, f, proto.introspection.State.serializeBinaryToWriter)
  }
  f = message.getRuntime()
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.introspection.Runtime.serializeBinaryToWriter
    )
  }
  f = message.getEvent()
  if (f != null) {
    writer.writeMessage(4, f, proto.introspection.Event.serializeBinaryToWriter)
  }
  f = message.getResponse()
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.introspection.CommandResponse.serializeBinaryToWriter
    )
  }
  f = message.getNotice()
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.introspection.ServerNotice.serializeBinaryToWriter
    )
  }
}

/**
 * optional Version version = 1;
 * @return {?proto.introspection.Version}
 */
proto.introspection.ServerMessage.prototype.getVersion = function() {
  return /** @type{?proto.introspection.Version} */ (jspb.Message.getWrapperField(
    this,
    proto.introspection.Version,
    1
  ))
}

/**
 * @param {?proto.introspection.Version|undefined} value
 * @return {!proto.introspection.ServerMessage} returns this
 */
proto.introspection.ServerMessage.prototype.setVersion = function(value) {
  return jspb.Message.setWrapperField(this, 1, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.introspection.ServerMessage} returns this
 */
proto.introspection.ServerMessage.prototype.clearVersion = function() {
  return this.setVersion(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.introspection.ServerMessage.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null
}

/**
 * optional State state = 2;
 * @return {?proto.introspection.State}
 */
proto.introspection.ServerMessage.prototype.getState = function() {
  return /** @type{?proto.introspection.State} */ (jspb.Message.getWrapperField(
    this,
    proto.introspection.State,
    2
  ))
}

/**
 * @param {?proto.introspection.State|undefined} value
 * @return {!proto.introspection.ServerMessage} returns this
 */
proto.introspection.ServerMessage.prototype.setState = function(value) {
  return jspb.Message.setOneofWrapperField(
    this,
    2,
    proto.introspection.ServerMessage.oneofGroups_[0],
    value
  )
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.introspection.ServerMessage} returns this
 */
proto.introspection.ServerMessage.prototype.clearState = function() {
  return this.setState(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.introspection.ServerMessage.prototype.hasState = function() {
  return jspb.Message.getField(this, 2) != null
}

/**
 * optional Runtime runtime = 3;
 * @return {?proto.introspection.Runtime}
 */
proto.introspection.ServerMessage.prototype.getRuntime = function() {
  return /** @type{?proto.introspection.Runtime} */ (jspb.Message.getWrapperField(
    this,
    proto.introspection.Runtime,
    3
  ))
}

/**
 * @param {?proto.introspection.Runtime|undefined} value
 * @return {!proto.introspection.ServerMessage} returns this
 */
proto.introspection.ServerMessage.prototype.setRuntime = function(value) {
  return jspb.Message.setOneofWrapperField(
    this,
    3,
    proto.introspection.ServerMessage.oneofGroups_[0],
    value
  )
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.introspection.ServerMessage} returns this
 */
proto.introspection.ServerMessage.prototype.clearRuntime = function() {
  return this.setRuntime(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.introspection.ServerMessage.prototype.hasRuntime = function() {
  return jspb.Message.getField(this, 3) != null
}

/**
 * optional Event event = 4;
 * @return {?proto.introspection.Event}
 */
proto.introspection.ServerMessage.prototype.getEvent = function() {
  return /** @type{?proto.introspection.Event} */ (jspb.Message.getWrapperField(
    this,
    proto.introspection.Event,
    4
  ))
}

/**
 * @param {?proto.introspection.Event|undefined} value
 * @return {!proto.introspection.ServerMessage} returns this
 */
proto.introspection.ServerMessage.prototype.setEvent = function(value) {
  return jspb.Message.setOneofWrapperField(
    this,
    4,
    proto.introspection.ServerMessage.oneofGroups_[0],
    value
  )
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.introspection.ServerMessage} returns this
 */
proto.introspection.ServerMessage.prototype.clearEvent = function() {
  return this.setEvent(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.introspection.ServerMessage.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 4) != null
}

/**
 * optional CommandResponse response = 5;
 * @return {?proto.introspection.CommandResponse}
 */
proto.introspection.ServerMessage.prototype.getResponse = function() {
  return /** @type{?proto.introspection.CommandResponse} */ (jspb.Message.getWrapperField(
    this,
    proto.introspection.CommandResponse,
    5
  ))
}

/**
 * @param {?proto.introspection.CommandResponse|undefined} value
 * @return {!proto.introspection.ServerMessage} returns this
 */
proto.introspection.ServerMessage.prototype.setResponse = function(value) {
  return jspb.Message.setOneofWrapperField(
    this,
    5,
    proto.introspection.ServerMessage.oneofGroups_[0],
    value
  )
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.introspection.ServerMessage} returns this
 */
proto.introspection.ServerMessage.prototype.clearResponse = function() {
  return this.setResponse(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.introspection.ServerMessage.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 5) != null
}

/**
 * optional ServerNotice notice = 6;
 * @return {?proto.introspection.ServerNotice}
 */
proto.introspection.ServerMessage.prototype.getNotice = function() {
  return /** @type{?proto.introspection.ServerNotice} */ (jspb.Message.getWrapperField(
    this,
    proto.introspection.ServerNotice,
    6
  ))
}

/**
 * @param {?proto.introspection.ServerNotice|undefined} value
 * @return {!proto.introspection.ServerMessage} returns this
 */
proto.introspection.ServerMessage.prototype.setNotice = function(value) {
  return jspb.Message.setOneofWrapperField(
    this,
    6,
    proto.introspection.ServerMessage.oneofGroups_[0],
    value
  )
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.introspection.ServerMessage} returns this
 */
proto.introspection.ServerMessage.prototype.clearNotice = function() {
  return this.setNotice(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.introspection.ServerMessage.prototype.hasNotice = function() {
  return jspb.Message.getField(this, 6) != null
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.Configuration.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.introspection.Configuration.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.Configuration} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.Configuration.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        retentionPeriodMs: jspb.Message.getFieldWithDefault(msg, 1, 0),
        stateSnapshotIntervalMs: jspb.Message.getFieldWithDefault(msg, 2, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.Configuration}
 */
proto.introspection.Configuration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.Configuration()
  return proto.introspection.Configuration.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.Configuration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.Configuration}
 */
proto.introspection.Configuration.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setRetentionPeriodMs(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setStateSnapshotIntervalMs(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.Configuration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.Configuration.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.Configuration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.Configuration.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined
  f = message.getRetentionPeriodMs()
  if (f !== 0) {
    writer.writeUint64(1, f)
  }
  f = message.getStateSnapshotIntervalMs()
  if (f !== 0) {
    writer.writeUint64(2, f)
  }
}

/**
 * optional uint64 retention_period_ms = 1;
 * @return {number}
 */
proto.introspection.Configuration.prototype.getRetentionPeriodMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.Configuration} returns this
 */
proto.introspection.Configuration.prototype.setRetentionPeriodMs = function(
  value
) {
  return jspb.Message.setProto3IntField(this, 1, value)
}

/**
 * optional uint64 state_snapshot_interval_ms = 2;
 * @return {number}
 */
proto.introspection.Configuration.prototype.getStateSnapshotIntervalMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.Configuration} returns this
 */
proto.introspection.Configuration.prototype.setStateSnapshotIntervalMs = function(
  value
) {
  return jspb.Message.setProto3IntField(this, 2, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.ClientCommand.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.introspection.ClientCommand.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.ClientCommand} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.ClientCommand.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        version:
          (f = msg.getVersion()) &&
          proto.introspection.Version.toObject(includeInstance, f),
        id: jspb.Message.getFieldWithDefault(msg, 2, 0),
        command: jspb.Message.getFieldWithDefault(msg, 3, 0),
        source: jspb.Message.getFieldWithDefault(msg, 4, 0),
        config:
          (f = msg.getConfig()) &&
          proto.introspection.Configuration.toObject(includeInstance, f),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.ClientCommand}
 */
proto.introspection.ClientCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.ClientCommand()
  return proto.introspection.ClientCommand.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.ClientCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.ClientCommand}
 */
proto.introspection.ClientCommand.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.introspection.Version()
        reader.readMessage(
          value,
          proto.introspection.Version.deserializeBinaryFromReader
        )
        msg.setVersion(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setId(value)
        break
      case 3:
        var value = /** @type {!proto.introspection.ClientCommand.Command} */ (reader.readEnum())
        msg.setCommand(value)
        break
      case 4:
        var value = /** @type {!proto.introspection.ClientCommand.Source} */ (reader.readEnum())
        msg.setSource(value)
        break
      case 5:
        var value = new proto.introspection.Configuration()
        reader.readMessage(
          value,
          proto.introspection.Configuration.deserializeBinaryFromReader
        )
        msg.setConfig(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.ClientCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.ClientCommand.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.ClientCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.ClientCommand.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined
  f = message.getVersion()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.introspection.Version.serializeBinaryToWriter
    )
  }
  f = message.getId()
  if (f !== 0) {
    writer.writeUint64(2, f)
  }
  f = message.getCommand()
  if (f !== 0.0) {
    writer.writeEnum(3, f)
  }
  f = message.getSource()
  if (f !== 0.0) {
    writer.writeEnum(4, f)
  }
  f = message.getConfig()
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.introspection.Configuration.serializeBinaryToWriter
    )
  }
}

/**
 * @enum {number}
 */
proto.introspection.ClientCommand.Source = {
  STATE: 0,
  RUNTIME: 1,
  EVENTS: 2,
}

/**
 * @enum {number}
 */
proto.introspection.ClientCommand.Command = {
  HELLO: 0,
  REQUEST: 1,
  PUSH_ENABLE: 2,
  PUSH_DISABLE: 3,
  PUSH_PAUSE: 4,
  PUSH_RESUME: 5,
  UPDATE_CONFIG: 7,
}

/**
 * optional Version version = 1;
 * @return {?proto.introspection.Version}
 */
proto.introspection.ClientCommand.prototype.getVersion = function() {
  return /** @type{?proto.introspection.Version} */ (jspb.Message.getWrapperField(
    this,
    proto.introspection.Version,
    1
  ))
}

/**
 * @param {?proto.introspection.Version|undefined} value
 * @return {!proto.introspection.ClientCommand} returns this
 */
proto.introspection.ClientCommand.prototype.setVersion = function(value) {
  return jspb.Message.setWrapperField(this, 1, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.introspection.ClientCommand} returns this
 */
proto.introspection.ClientCommand.prototype.clearVersion = function() {
  return this.setVersion(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.introspection.ClientCommand.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null
}

/**
 * optional uint64 id = 2;
 * @return {number}
 */
proto.introspection.ClientCommand.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.ClientCommand} returns this
 */
proto.introspection.ClientCommand.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value)
}

/**
 * optional Command command = 3;
 * @return {!proto.introspection.ClientCommand.Command}
 */
proto.introspection.ClientCommand.prototype.getCommand = function() {
  return /** @type {!proto.introspection.ClientCommand.Command} */ (jspb.Message.getFieldWithDefault(
    this,
    3,
    0
  ))
}

/**
 * @param {!proto.introspection.ClientCommand.Command} value
 * @return {!proto.introspection.ClientCommand} returns this
 */
proto.introspection.ClientCommand.prototype.setCommand = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value)
}

/**
 * optional Source source = 4;
 * @return {!proto.introspection.ClientCommand.Source}
 */
proto.introspection.ClientCommand.prototype.getSource = function() {
  return /** @type {!proto.introspection.ClientCommand.Source} */ (jspb.Message.getFieldWithDefault(
    this,
    4,
    0
  ))
}

/**
 * @param {!proto.introspection.ClientCommand.Source} value
 * @return {!proto.introspection.ClientCommand} returns this
 */
proto.introspection.ClientCommand.prototype.setSource = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value)
}

/**
 * optional Configuration config = 5;
 * @return {?proto.introspection.Configuration}
 */
proto.introspection.ClientCommand.prototype.getConfig = function() {
  return /** @type{?proto.introspection.Configuration} */ (jspb.Message.getWrapperField(
    this,
    proto.introspection.Configuration,
    5
  ))
}

/**
 * @param {?proto.introspection.Configuration|undefined} value
 * @return {!proto.introspection.ClientCommand} returns this
 */
proto.introspection.ClientCommand.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 5, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.introspection.ClientCommand} returns this
 */
proto.introspection.ClientCommand.prototype.clearConfig = function() {
  return this.setConfig(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.introspection.ClientCommand.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 5) != null
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.CommandResponse.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.introspection.CommandResponse.toObject(
      opt_includeInstance,
      this
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.CommandResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.CommandResponse.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, 0),
        result: jspb.Message.getFieldWithDefault(msg, 2, 0),
        error: jspb.Message.getFieldWithDefault(msg, 3, ''),
        effectiveConfig:
          (f = msg.getEffectiveConfig()) &&
          proto.introspection.Configuration.toObject(includeInstance, f),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.CommandResponse}
 */
proto.introspection.CommandResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.CommandResponse()
  return proto.introspection.CommandResponse.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.CommandResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.CommandResponse}
 */
proto.introspection.CommandResponse.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setId(value)
        break
      case 2:
        var value = /** @type {!proto.introspection.CommandResponse.Result} */ (reader.readEnum())
        msg.setResult(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setError(value)
        break
      case 4:
        var value = new proto.introspection.Configuration()
        reader.readMessage(
          value,
          proto.introspection.Configuration.deserializeBinaryFromReader
        )
        msg.setEffectiveConfig(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.CommandResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.CommandResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.CommandResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.CommandResponse.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined
  f = message.getId()
  if (f !== 0) {
    writer.writeUint64(1, f)
  }
  f = message.getResult()
  if (f !== 0.0) {
    writer.writeEnum(2, f)
  }
  f = message.getError()
  if (f.length > 0) {
    writer.writeString(3, f)
  }
  f = message.getEffectiveConfig()
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.introspection.Configuration.serializeBinaryToWriter
    )
  }
}

/**
 * @enum {number}
 */
proto.introspection.CommandResponse.Result = {
  OK: 0,
  ERR: 1,
}

/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.introspection.CommandResponse.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {number} value
 * @return {!proto.introspection.CommandResponse} returns this
 */
proto.introspection.CommandResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value)
}

/**
 * optional Result result = 2;
 * @return {!proto.introspection.CommandResponse.Result}
 */
proto.introspection.CommandResponse.prototype.getResult = function() {
  return /** @type {!proto.introspection.CommandResponse.Result} */ (jspb.Message.getFieldWithDefault(
    this,
    2,
    0
  ))
}

/**
 * @param {!proto.introspection.CommandResponse.Result} value
 * @return {!proto.introspection.CommandResponse} returns this
 */
proto.introspection.CommandResponse.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value)
}

/**
 * optional string error = 3;
 * @return {string}
 */
proto.introspection.CommandResponse.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/**
 * @param {string} value
 * @return {!proto.introspection.CommandResponse} returns this
 */
proto.introspection.CommandResponse.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional Configuration effective_config = 4;
 * @return {?proto.introspection.Configuration}
 */
proto.introspection.CommandResponse.prototype.getEffectiveConfig = function() {
  return /** @type{?proto.introspection.Configuration} */ (jspb.Message.getWrapperField(
    this,
    proto.introspection.Configuration,
    4
  ))
}

/**
 * @param {?proto.introspection.Configuration|undefined} value
 * @return {!proto.introspection.CommandResponse} returns this
 */
proto.introspection.CommandResponse.prototype.setEffectiveConfig = function(
  value
) {
  return jspb.Message.setWrapperField(this, 4, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.introspection.CommandResponse} returns this
 */
proto.introspection.CommandResponse.prototype.clearEffectiveConfig = function() {
  return this.setEffectiveConfig(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.introspection.CommandResponse.prototype.hasEffectiveConfig = function() {
  return jspb.Message.getField(this, 4) != null
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.introspection.ServerNotice.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.introspection.ServerNotice.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.introspection.ServerNotice} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.introspection.ServerNotice.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        kind: jspb.Message.getFieldWithDefault(msg, 1, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.introspection.ServerNotice}
 */
proto.introspection.ServerNotice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.introspection.ServerNotice()
  return proto.introspection.ServerNotice.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.introspection.ServerNotice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.introspection.ServerNotice}
 */
proto.introspection.ServerNotice.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {!proto.introspection.ServerNotice.Kind} */ (reader.readEnum())
        msg.setKind(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.introspection.ServerNotice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.introspection.ServerNotice.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.introspection.ServerNotice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.introspection.ServerNotice.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined
  f = message.getKind()
  if (f !== 0.0) {
    writer.writeEnum(1, f)
  }
}

/**
 * @enum {number}
 */
proto.introspection.ServerNotice.Kind = {
  DISCARDING_EVENTS: 0,
}

/**
 * optional Kind kind = 1;
 * @return {!proto.introspection.ServerNotice.Kind}
 */
proto.introspection.ServerNotice.prototype.getKind = function() {
  return /** @type {!proto.introspection.ServerNotice.Kind} */ (jspb.Message.getFieldWithDefault(
    this,
    1,
    0
  ))
}

/**
 * @param {!proto.introspection.ServerNotice.Kind} value
 * @return {!proto.introspection.ServerNotice} returns this
 */
proto.introspection.ServerNotice.prototype.setKind = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value)
}

/**
 * @enum {number}
 */
proto.introspection.Status = {
  ACTIVE: 0,
  CLOSED: 1,
  OPENING: 2,
  CLOSING: 3,
  ERROR: 4,
}

/**
 * @enum {number}
 */
proto.introspection.Role = {
  INITIATOR: 0,
  RESPONDER: 1,
}

goog.object.extend(exports, proto.introspection)
